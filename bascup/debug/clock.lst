                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Fri Nov  6 21:37:46 2020
                                      5 ;--------------------------------------------------------
                                      6 	.module clock
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _dnClock
                                     14 	.globl _conSec
                                     15 	.globl _transTime
                                     16 	.globl _Meny
                                     17 	.globl _Set_Meny
                                     18 	.globl _Set_DnTimer
                                     19 	.globl _Set_Brigh
                                     20 	.globl _button
                                     21 	.globl _hard_Reset
                                     22 	.globl _EEPROM_UNLOCK
                                     23 	.globl _RTC_Set
                                     24 	.globl _RTC_Read
                                     25 	.globl _i2c_read_byte
                                     26 	.globl _i2c_send_byte
                                     27 	.globl _i2c_init
                                     28 	.globl _i2c_restart
                                     29 	.globl _i2c_start
                                     30 	.globl _i2c_stop
                                     31 	.globl _TM1637_cleer
                                     32 	.globl _TM1637_send
                                     33 	.globl _TM1637_brigh
                                     34 	.globl _TM1637_initialization
                                     35 	.globl _clockTemp3
                                     36 	.globl _clockTemp2
                                     37 	.globl _clockTemp1
                                     38 	.globl _con1_sec
                                     39 	.globl _cl_sec
                                     40 	.globl _cl_min
                                     41 	.globl _cl_hour
                                     42 	.globl _con_sec
                                     43 	.globl _con_min
                                     44 	.globl _con_hour
                                     45 	.globl _con_day
                                     46 	.globl _auto_exit
                                     47 	.globl _But_Buff
                                     48 	.globl _Point_Meny
                                     49 	.globl _Soft_Timer
                                     50 	.globl _ASCI
                                     51 	.globl _TM1637_seg
                                     52 	.globl _command2
                                     53 	.globl _command1
                                     54 	.globl _brigh
                                     55 	.globl _PointTimer
                                     56 	.globl _timeRes
                                     57 	.globl _timeToSec
                                     58 	.globl _DnClock_Tim_3
                                     59 	.globl _DnClock_Tim_2
                                     60 	.globl _DnClock_Tim_1
                                     61 	.globl _DnClock_Tim_0
                                     62 	.globl _Clock_Temp
                                     63 	.globl _dot
                                     64 	.globl _year
                                     65 	.globl _month
                                     66 	.globl _date
                                     67 	.globl _day
                                     68 	.globl _hour
                                     69 	.globl _min
                                     70 	.globl _sec
                                     71 	.globl _Set_time
                                     72 	.globl _clock
                                     73 ;--------------------------------------------------------
                                     74 ; ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area DATA
      000000                         77 _sec::
      000000                         78 	.ds 1
      000001                         79 _min::
      000001                         80 	.ds 1
      000002                         81 _hour::
      000002                         82 	.ds 1
      000003                         83 _day::
      000003                         84 	.ds 1
      000004                         85 _date::
      000004                         86 	.ds 1
      000005                         87 _month::
      000005                         88 	.ds 1
      000006                         89 _year::
      000006                         90 	.ds 1
      000007                         91 _dot::
      000007                         92 	.ds 1
      000008                         93 _Clock_Temp::
      000008                         94 	.ds 2
      00000A                         95 _DnClock_Tim_0::
      00000A                         96 	.ds 4
      00000E                         97 _DnClock_Tim_1::
      00000E                         98 	.ds 4
      000012                         99 _DnClock_Tim_2::
      000012                        100 	.ds 4
      000016                        101 _DnClock_Tim_3::
      000016                        102 	.ds 4
      00001A                        103 _timeToSec::
      00001A                        104 	.ds 4
      00001E                        105 _timeRes::
      00001E                        106 	.ds 4
      000022                        107 _PointTimer::
      000022                        108 	.ds 1
                                    109 ;--------------------------------------------------------
                                    110 ; ram data
                                    111 ;--------------------------------------------------------
                                    112 	.area INITIALIZED
      000000                        113 _brigh::
      000000                        114 	.ds 1
      000001                        115 _command1::
      000001                        116 	.ds 1
      000002                        117 _command2::
      000002                        118 	.ds 1
      000003                        119 _TM1637_seg::
      000003                        120 	.ds 4
      000007                        121 _ASCI::
      000007                        122 	.ds 10
      000011                        123 _Soft_Timer::
      000011                        124 	.ds 2
      000013                        125 _Point_Meny::
      000013                        126 	.ds 2
      000015                        127 _But_Buff::
      000015                        128 	.ds 1
      000016                        129 _auto_exit::
      000016                        130 	.ds 1
      000017                        131 _con_day::
      000017                        132 	.ds 4
      00001B                        133 _con_hour::
      00001B                        134 	.ds 4
      00001F                        135 _con_min::
      00001F                        136 	.ds 4
      000023                        137 _con_sec::
      000023                        138 	.ds 4
      000027                        139 _cl_hour::
      000027                        140 	.ds 4
      00002B                        141 _cl_min::
      00002B                        142 	.ds 4
      00002F                        143 _cl_sec::
      00002F                        144 	.ds 4
      000033                        145 _con1_sec::
      000033                        146 	.ds 4
      000037                        147 _clockTemp1::
      000037                        148 	.ds 4
      00003B                        149 _clockTemp2::
      00003B                        150 	.ds 4
      00003F                        151 _clockTemp3::
      00003F                        152 	.ds 4
                                    153 ;--------------------------------------------------------
                                    154 ; Stack segment in internal ram 
                                    155 ;--------------------------------------------------------
                                    156 	.area	SSEG
      000000                        157 __start__stack:
      000000                        158 	.ds	1
                                    159 
                                    160 ;--------------------------------------------------------
                                    161 ; absolute external ram data
                                    162 ;--------------------------------------------------------
                                    163 	.area DABS (ABS)
                                    164 ;--------------------------------------------------------
                                    165 ; interrupt vector 
                                    166 ;--------------------------------------------------------
                                    167 	.area HOME
      000000                        168 __interrupt_vect:
      000000 82v00u00u00            169 	int s_GSINIT ;reset
      000004 82 00 00 00            170 	int 0x0000 ;trap
      000008 82 00 00 00            171 	int 0x0000 ;int0
      00000C 82 00 00 00            172 	int 0x0000 ;int1
      000010 82 00 00 00            173 	int 0x0000 ;int2
      000014 82 00 00 00            174 	int 0x0000 ;int3
      000018 82 00 00 00            175 	int 0x0000 ;int4
      00001C 82 00 00 00            176 	int 0x0000 ;int5
      000020 82 00 00 00            177 	int 0x0000 ;int6
      000024 82 00 00 00            178 	int 0x0000 ;int7
      000028 82 00 00 00            179 	int 0x0000 ;int8
      00002C 82 00 00 00            180 	int 0x0000 ;int9
      000030 82 00 00 00            181 	int 0x0000 ;int10
      000034 82 00 00 00            182 	int 0x0000 ;int11
      000038 82 00 00 00            183 	int 0x0000 ;int12
      00003C 82 00 00 00            184 	int 0x0000 ;int13
      000040 82 00 00 00            185 	int 0x0000 ;int14
      000044 82 00 00 00            186 	int 0x0000 ;int15
      000048 82 00 00 00            187 	int 0x0000 ;int16
      00004C 82 00 00 00            188 	int 0x0000 ;int17
      000050 82 00 00 00            189 	int 0x0000 ;int18
      000054 82 00 00 00            190 	int 0x0000 ;int19
      000058 82 00 00 00            191 	int 0x0000 ;int20
      00005C 82 00 00 00            192 	int 0x0000 ;int21
      000060 82 00 00 00            193 	int 0x0000 ;int22
      000064 82 00 00 00            194 	int 0x0000 ;int23
      000068 82 00 00 00            195 	int 0x0000 ;int24
      00006C 82 00 00 00            196 	int 0x0000 ;int25
      000070 82 00 00 00            197 	int 0x0000 ;int26
      000074 82 00 00 00            198 	int 0x0000 ;int27
      000078 82 00 00 00            199 	int 0x0000 ;int28
      00007C 82 00 00 00            200 	int 0x0000 ;int29
                                    201 ;--------------------------------------------------------
                                    202 ; global & static initialisations
                                    203 ;--------------------------------------------------------
                                    204 	.area HOME
                                    205 	.area GSINIT
                                    206 	.area GSFINAL
                                    207 	.area GSINIT
      000000                        208 __sdcc_gs_init_startup:
      000000                        209 __sdcc_init_data:
                                    210 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  211 	ldw x, #l_DATA
      000003 27 07            [ 1]  212 	jreq	00002$
      000005                        213 00001$:
      000005 72 4FuFFuFF      [ 1]  214 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  215 	decw x
      00000A 26 F9            [ 1]  216 	jrne	00001$
      00000C                        217 00002$:
      00000C AEr00r00         [ 2]  218 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  219 	jreq	00004$
      000011                        220 00003$:
      000011 D6uFFuFF         [ 1]  221 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  222 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  223 	decw	x
      000018 26 F7            [ 1]  224 	jrne	00003$
      00001A                        225 00004$:
                                    226 ; stm8_genXINIT() end
                                    227 	.area GSFINAL
      000000 CCr00r80         [ 2]  228 	jp	__sdcc_program_startup
                                    229 ;--------------------------------------------------------
                                    230 ; Home
                                    231 ;--------------------------------------------------------
                                    232 	.area HOME
                                    233 	.area HOME
      000080                        234 __sdcc_program_startup:
      000080 CCr12r78         [ 2]  235 	jp	_main
                                    236 ;	return from main will return to caller
                                    237 ;--------------------------------------------------------
                                    238 ; code
                                    239 ;--------------------------------------------------------
                                    240 	.area CODE
                                    241 ;	lib/stm8.h: 4: static void delay(unsigned long t)
                                    242 ;	-----------------------------------------
                                    243 ;	 function delay
                                    244 ;	-----------------------------------------
      000000                        245 _delay:
      000000 52 08            [ 2]  246 	sub	sp, #8
                                    247 ;	lib/stm8.h: 6: while(t--){
      000002 16 0B            [ 2]  248 	ldw	y, (0x0b, sp)
      000004 17 01            [ 2]  249 	ldw	(0x01, sp), y
      000006 1E 0D            [ 2]  250 	ldw	x, (0x0d, sp)
      000008                        251 00101$:
      000008 41               [ 1]  252 	exg	a, xl
      000009 6B 08            [ 1]  253 	ld	(0x08, sp), a
      00000B 41               [ 1]  254 	exg	a, xl
      00000C 16 01            [ 2]  255 	ldw	y, (0x01, sp)
      00000E 17 05            [ 2]  256 	ldw	(0x05, sp), y
      000010 9E               [ 1]  257 	ld	a, xh
      000011 1D 00 01         [ 2]  258 	subw	x, #0x0001
      000014 88               [ 1]  259 	push	a
      000015 7B 03            [ 1]  260 	ld	a, (0x03, sp)
      000017 A2 00            [ 1]  261 	sbc	a, #0x00
      000019 6B 03            [ 1]  262 	ld	(0x03, sp), a
      00001B 7B 02            [ 1]  263 	ld	a, (0x02, sp)
      00001D A2 00            [ 1]  264 	sbc	a, #0x00
      00001F 6B 02            [ 1]  265 	ld	(0x02, sp), a
      000021 84               [ 1]  266 	pop	a
      000022 0D 08            [ 1]  267 	tnz	(0x08, sp)
      000024 26 07            [ 1]  268 	jrne	00115$
      000026 4D               [ 1]  269 	tnz	a
      000027 26 04            [ 1]  270 	jrne	00115$
      000029 16 05            [ 2]  271 	ldw	y, (0x05, sp)
      00002B 27 04            [ 1]  272 	jreq	00104$
      00002D                        273 00115$:
                                    274 ;	lib/stm8.h: 10: __endasm;
      00002D 9D               [ 1]  275 	nop
      00002E 9D               [ 1]  276 	nop
      00002F 20 D7            [ 2]  277 	jra	00101$
      000031                        278 00104$:
      000031 5B 08            [ 2]  279 	addw	sp, #8
      000033 81               [ 4]  280 	ret
                                    281 ;	lib/TM1637.c: 27: void TM1637_start(){
                                    282 ;	-----------------------------------------
                                    283 ;	 function TM1637_start
                                    284 ;	-----------------------------------------
      000034                        285 _TM1637_start:
                                    286 ;	lib/TM1637.c: 28: TM1637_ODR |= 1<<TM1637_SCL;
      000034 AE 50 0A         [ 2]  287 	ldw	x, #0x500a
      000037 F6               [ 1]  288 	ld	a, (x)
      000038 AA 08            [ 1]  289 	or	a, #0x08
      00003A F7               [ 1]  290 	ld	(x), a
                                    291 ;	lib/TM1637.c: 29: TM1637_ODR |= 1<<TM1637_SDA;
      00003B AE 50 0A         [ 2]  292 	ldw	x, #0x500a
      00003E F6               [ 1]  293 	ld	a, (x)
      00003F AA 10            [ 1]  294 	or	a, #0x10
      000041 F7               [ 1]  295 	ld	(x), a
                                    296 ;	lib/TM1637.c: 30: TM1637_DELAY();
      000042 4B 05            [ 1]  297 	push	#0x05
      000044 5F               [ 1]  298 	clrw	x
      000045 89               [ 2]  299 	pushw	x
      000046 4B 00            [ 1]  300 	push	#0x00
      000048 CDr00r00         [ 4]  301 	call	_delay
      00004B 5B 04            [ 2]  302 	addw	sp, #4
                                    303 ;	lib/TM1637.c: 31: TM1637_ODR &= ~(1<<TM1637_SDA);
      00004D AE 50 0A         [ 2]  304 	ldw	x, #0x500a
      000050 F6               [ 1]  305 	ld	a, (x)
      000051 A4 EF            [ 1]  306 	and	a, #0xef
      000053 F7               [ 1]  307 	ld	(x), a
      000054 81               [ 4]  308 	ret
                                    309 ;	lib/TM1637.c: 34: void TM1637_stop(){
                                    310 ;	-----------------------------------------
                                    311 ;	 function TM1637_stop
                                    312 ;	-----------------------------------------
      000055                        313 _TM1637_stop:
                                    314 ;	lib/TM1637.c: 35: TM1637_ODR &= ~(1<<TM1637_SCL);
      000055 AE 50 0A         [ 2]  315 	ldw	x, #0x500a
      000058 F6               [ 1]  316 	ld	a, (x)
      000059 A4 F7            [ 1]  317 	and	a, #0xf7
      00005B F7               [ 1]  318 	ld	(x), a
                                    319 ;	lib/TM1637.c: 36: TM1637_DELAY();
      00005C 4B 05            [ 1]  320 	push	#0x05
      00005E 5F               [ 1]  321 	clrw	x
      00005F 89               [ 2]  322 	pushw	x
      000060 4B 00            [ 1]  323 	push	#0x00
      000062 CDr00r00         [ 4]  324 	call	_delay
      000065 5B 04            [ 2]  325 	addw	sp, #4
                                    326 ;	lib/TM1637.c: 37: TM1637_ODR &= ~(1<<TM1637_SDA);
      000067 AE 50 0A         [ 2]  327 	ldw	x, #0x500a
      00006A F6               [ 1]  328 	ld	a, (x)
      00006B A4 EF            [ 1]  329 	and	a, #0xef
      00006D F7               [ 1]  330 	ld	(x), a
                                    331 ;	lib/TM1637.c: 38: TM1637_DELAY();
      00006E 4B 05            [ 1]  332 	push	#0x05
      000070 5F               [ 1]  333 	clrw	x
      000071 89               [ 2]  334 	pushw	x
      000072 4B 00            [ 1]  335 	push	#0x00
      000074 CDr00r00         [ 4]  336 	call	_delay
      000077 5B 04            [ 2]  337 	addw	sp, #4
                                    338 ;	lib/TM1637.c: 39: TM1637_ODR |= 1<<TM1637_SCL;;
      000079 AE 50 0A         [ 2]  339 	ldw	x, #0x500a
      00007C F6               [ 1]  340 	ld	a, (x)
      00007D AA 08            [ 1]  341 	or	a, #0x08
      00007F F7               [ 1]  342 	ld	(x), a
                                    343 ;	lib/TM1637.c: 40: TM1637_DELAY();
      000080 4B 05            [ 1]  344 	push	#0x05
      000082 5F               [ 1]  345 	clrw	x
      000083 89               [ 2]  346 	pushw	x
      000084 4B 00            [ 1]  347 	push	#0x00
      000086 CDr00r00         [ 4]  348 	call	_delay
      000089 5B 04            [ 2]  349 	addw	sp, #4
                                    350 ;	lib/TM1637.c: 41: TM1637_ODR |= 1<<TM1637_SDA;
      00008B AE 50 0A         [ 2]  351 	ldw	x, #0x500a
      00008E F6               [ 1]  352 	ld	a, (x)
      00008F AA 10            [ 1]  353 	or	a, #0x10
      000091 F7               [ 1]  354 	ld	(x), a
      000092 81               [ 4]  355 	ret
                                    356 ;	lib/TM1637.c: 45: void TM1637_writeByte(char pack){
                                    357 ;	-----------------------------------------
                                    358 ;	 function TM1637_writeByte
                                    359 ;	-----------------------------------------
      000093                        360 _TM1637_writeByte:
      000093 88               [ 1]  361 	push	a
                                    362 ;	lib/TM1637.c: 48: for(i=0;i<8;i++)  
      000094 0F 01            [ 1]  363 	clr	(0x01, sp)
      000096                        364 00108$:
                                    365 ;	lib/TM1637.c: 50: TM1637_ODR &= ~(1<<TM1637_SCL);
      000096 AE 50 0A         [ 2]  366 	ldw	x, #0x500a
      000099 F6               [ 1]  367 	ld	a, (x)
      00009A A4 F7            [ 1]  368 	and	a, #0xf7
      00009C F7               [ 1]  369 	ld	(x), a
      00009D AE 50 0A         [ 2]  370 	ldw	x, #0x500a
      0000A0 F6               [ 1]  371 	ld	a, (x)
                                    372 ;	lib/TM1637.c: 51: if(pack & 0x01)
      0000A1 88               [ 1]  373 	push	a
      0000A2 7B 05            [ 1]  374 	ld	a, (0x05, sp)
      0000A4 44               [ 1]  375 	srl	a
      0000A5 84               [ 1]  376 	pop	a
      0000A6 24 08            [ 1]  377 	jrnc	00102$
                                    378 ;	lib/TM1637.c: 52: { TM1637_ODR |= 1<<TM1637_SDA;}
      0000A8 AA 10            [ 1]  379 	or	a, #0x10
      0000AA AE 50 0A         [ 2]  380 	ldw	x, #0x500a
      0000AD F7               [ 1]  381 	ld	(x), a
      0000AE 20 06            [ 2]  382 	jra	00103$
      0000B0                        383 00102$:
                                    384 ;	lib/TM1637.c: 53: else {TM1637_ODR &= ~(1<<TM1637_SDA);}
      0000B0 A4 EF            [ 1]  385 	and	a, #0xef
      0000B2 AE 50 0A         [ 2]  386 	ldw	x, #0x500a
      0000B5 F7               [ 1]  387 	ld	(x), a
      0000B6                        388 00103$:
                                    389 ;	lib/TM1637.c: 54: TM1637_DELAY();
      0000B6 4B 05            [ 1]  390 	push	#0x05
      0000B8 5F               [ 1]  391 	clrw	x
      0000B9 89               [ 2]  392 	pushw	x
      0000BA 4B 00            [ 1]  393 	push	#0x00
      0000BC CDr00r00         [ 4]  394 	call	_delay
      0000BF 5B 04            [ 2]  395 	addw	sp, #4
                                    396 ;	lib/TM1637.c: 55: pack = pack >> 1;
      0000C1 07 04            [ 1]  397 	sra	(0x04, sp)
                                    398 ;	lib/TM1637.c: 56: TM1637_ODR |= 1<<TM1637_SCL;
      0000C3 AE 50 0A         [ 2]  399 	ldw	x, #0x500a
      0000C6 F6               [ 1]  400 	ld	a, (x)
      0000C7 AA 08            [ 1]  401 	or	a, #0x08
      0000C9 F7               [ 1]  402 	ld	(x), a
                                    403 ;	lib/TM1637.c: 57: TM1637_DELAY();
      0000CA 4B 05            [ 1]  404 	push	#0x05
      0000CC 5F               [ 1]  405 	clrw	x
      0000CD 89               [ 2]  406 	pushw	x
      0000CE 4B 00            [ 1]  407 	push	#0x00
      0000D0 CDr00r00         [ 4]  408 	call	_delay
      0000D3 5B 04            [ 2]  409 	addw	sp, #4
                                    410 ;	lib/TM1637.c: 48: for(i=0;i<8;i++)  
      0000D5 0C 01            [ 1]  411 	inc	(0x01, sp)
      0000D7 7B 01            [ 1]  412 	ld	a, (0x01, sp)
      0000D9 A1 08            [ 1]  413 	cp	a, #0x08
      0000DB 2F B9            [ 1]  414 	jrslt	00108$
                                    415 ;	lib/TM1637.c: 59: TM1637_ODR &= ~(1<<TM1637_SCL);
      0000DD AE 50 0A         [ 2]  416 	ldw	x, #0x500a
      0000E0 F6               [ 1]  417 	ld	a, (x)
      0000E1 A4 F7            [ 1]  418 	and	a, #0xf7
      0000E3 F7               [ 1]  419 	ld	(x), a
                                    420 ;	lib/TM1637.c: 60: TM1637_DELAY();
      0000E4 4B 05            [ 1]  421 	push	#0x05
      0000E6 5F               [ 1]  422 	clrw	x
      0000E7 89               [ 2]  423 	pushw	x
      0000E8 4B 00            [ 1]  424 	push	#0x00
      0000EA CDr00r00         [ 4]  425 	call	_delay
      0000ED 5B 04            [ 2]  426 	addw	sp, #4
                                    427 ;	lib/TM1637.c: 61: TM1637_DDR &= ~(1<<TM1637_SDA);
      0000EF AE 50 0C         [ 2]  428 	ldw	x, #0x500c
      0000F2 F6               [ 1]  429 	ld	a, (x)
      0000F3 A4 EF            [ 1]  430 	and	a, #0xef
      0000F5 F7               [ 1]  431 	ld	(x), a
                                    432 ;	lib/TM1637.c: 62: while((TM1637_IDR & (1<<TM1637_SDA)));
      0000F6                        433 00105$:
      0000F6 AE 50 0B         [ 2]  434 	ldw	x, #0x500b
      0000F9 F6               [ 1]  435 	ld	a, (x)
      0000FA A5 10            [ 1]  436 	bcp	a, #0x10
      0000FC 26 F8            [ 1]  437 	jrne	00105$
                                    438 ;	lib/TM1637.c: 63: TM1637_DDR |= (1<<TM1637_SDA);
      0000FE AE 50 0C         [ 2]  439 	ldw	x, #0x500c
      000101 F6               [ 1]  440 	ld	a, (x)
      000102 AA 10            [ 1]  441 	or	a, #0x10
      000104 F7               [ 1]  442 	ld	(x), a
                                    443 ;	lib/TM1637.c: 64: TM1637_ODR |= 1<<TM1637_SCL;
      000105 AE 50 0A         [ 2]  444 	ldw	x, #0x500a
      000108 F6               [ 1]  445 	ld	a, (x)
      000109 AA 08            [ 1]  446 	or	a, #0x08
      00010B F7               [ 1]  447 	ld	(x), a
                                    448 ;	lib/TM1637.c: 65: TM1637_DELAY();
      00010C 4B 05            [ 1]  449 	push	#0x05
      00010E 5F               [ 1]  450 	clrw	x
      00010F 89               [ 2]  451 	pushw	x
      000110 4B 00            [ 1]  452 	push	#0x00
      000112 CDr00r00         [ 4]  453 	call	_delay
      000115 5B 04            [ 2]  454 	addw	sp, #4
                                    455 ;	lib/TM1637.c: 66: TM1637_ODR &= ~(1<<TM1637_SCL);
      000117 AE 50 0A         [ 2]  456 	ldw	x, #0x500a
      00011A F6               [ 1]  457 	ld	a, (x)
      00011B A4 F7            [ 1]  458 	and	a, #0xf7
      00011D F7               [ 1]  459 	ld	(x), a
      00011E 84               [ 1]  460 	pop	a
      00011F 81               [ 4]  461 	ret
                                    462 ;	lib/TM1637.c: 70: void TM1637_brigh(char brigh){
                                    463 ;	-----------------------------------------
                                    464 ;	 function TM1637_brigh
                                    465 ;	-----------------------------------------
      000120                        466 _TM1637_brigh:
                                    467 ;	lib/TM1637.c: 71: if(brigh>7)brigh = 7;
      000120 7B 03            [ 1]  468 	ld	a, (0x03, sp)
      000122 A1 07            [ 1]  469 	cp	a, #0x07
      000124 2D 04            [ 1]  470 	jrsle	00102$
      000126 A6 07            [ 1]  471 	ld	a, #0x07
      000128 6B 03            [ 1]  472 	ld	(0x03, sp), a
      00012A                        473 00102$:
                                    474 ;	lib/TM1637.c: 73: TM1637_start();
      00012A CDr00r34         [ 4]  475 	call	_TM1637_start
                                    476 ;	lib/TM1637.c: 74: TM1637_writeByte(0x88 + brigh); //Команда, задающая яркость дисплея
      00012D 7B 03            [ 1]  477 	ld	a, (0x03, sp)
      00012F AB 88            [ 1]  478 	add	a, #0x88
      000131 88               [ 1]  479 	push	a
      000132 CDr00r93         [ 4]  480 	call	_TM1637_writeByte
      000135 84               [ 1]  481 	pop	a
                                    482 ;	lib/TM1637.c: 75: TM1637_stop();
      000136 CCr00r55         [ 2]  483 	jp	_TM1637_stop
                                    484 ;	lib/TM1637.c: 78: void TM1637_send(){
                                    485 ;	-----------------------------------------
                                    486 ;	 function TM1637_send
                                    487 ;	-----------------------------------------
      000139                        488 _TM1637_send:
      000139 52 02            [ 2]  489 	sub	sp, #2
                                    490 ;	lib/TM1637.c: 80: TM1637_start();                  
      00013B CDr00r34         [ 4]  491 	call	_TM1637_start
                                    492 ;	lib/TM1637.c: 81: TM1637_writeByte(command1);			//Команда записи в регистр дисплея
      00013E 3Bu00u01         [ 1]  493 	push	_command1+0
      000141 CDr00r93         [ 4]  494 	call	_TM1637_writeByte
      000144 84               [ 1]  495 	pop	a
                                    496 ;	lib/TM1637.c: 82: TM1637_stop();
      000145 CDr00r55         [ 4]  497 	call	_TM1637_stop
                                    498 ;	lib/TM1637.c: 84: TM1637_start();
      000148 CDr00r34         [ 4]  499 	call	_TM1637_start
                                    500 ;	lib/TM1637.c: 85: TM1637_writeByte(command2); //Команда начального адреса для автоинкремента адреса
      00014B 3Bu00u02         [ 1]  501 	push	_command2+0
      00014E CDr00r93         [ 4]  502 	call	_TM1637_writeByte
      000151 84               [ 1]  503 	pop	a
                                    504 ;	lib/TM1637.c: 87: TM1637_writeByte(TM1637_seg[0]);
      000152 AEr00r03         [ 2]  505 	ldw	x, #_TM1637_seg+0
      000155 1F 01            [ 2]  506 	ldw	(0x01, sp), x
      000157 1E 01            [ 2]  507 	ldw	x, (0x01, sp)
      000159 F6               [ 1]  508 	ld	a, (x)
      00015A 88               [ 1]  509 	push	a
      00015B CDr00r93         [ 4]  510 	call	_TM1637_writeByte
      00015E 84               [ 1]  511 	pop	a
                                    512 ;	lib/TM1637.c: 88: TM1637_writeByte(TM1637_seg[1]);
      00015F 1E 01            [ 2]  513 	ldw	x, (0x01, sp)
      000161 E6 01            [ 1]  514 	ld	a, (0x1, x)
      000163 88               [ 1]  515 	push	a
      000164 CDr00r93         [ 4]  516 	call	_TM1637_writeByte
      000167 84               [ 1]  517 	pop	a
                                    518 ;	lib/TM1637.c: 89: TM1637_writeByte(TM1637_seg[2]);
      000168 1E 01            [ 2]  519 	ldw	x, (0x01, sp)
      00016A E6 02            [ 1]  520 	ld	a, (0x2, x)
      00016C 88               [ 1]  521 	push	a
      00016D CDr00r93         [ 4]  522 	call	_TM1637_writeByte
      000170 84               [ 1]  523 	pop	a
                                    524 ;	lib/TM1637.c: 90: TM1637_writeByte(TM1637_seg[3]);
      000171 1E 01            [ 2]  525 	ldw	x, (0x01, sp)
      000173 E6 03            [ 1]  526 	ld	a, (0x3, x)
      000175 88               [ 1]  527 	push	a
      000176 CDr00r93         [ 4]  528 	call	_TM1637_writeByte
      000179 84               [ 1]  529 	pop	a
                                    530 ;	lib/TM1637.c: 92: TM1637_stop();
      00017A CDr00r55         [ 4]  531 	call	_TM1637_stop
      00017D 5B 02            [ 2]  532 	addw	sp, #2
      00017F 81               [ 4]  533 	ret
                                    534 ;	lib/TM1637.c: 95: void TM1637_cleer(){
                                    535 ;	-----------------------------------------
                                    536 ;	 function TM1637_cleer
                                    537 ;	-----------------------------------------
      000180                        538 _TM1637_cleer:
      000180 52 02            [ 2]  539 	sub	sp, #2
                                    540 ;	lib/TM1637.c: 96: TM1637_seg[0] = 0x00;
      000182 AEr00r03         [ 2]  541 	ldw	x, #_TM1637_seg+0
      000185 1F 01            [ 2]  542 	ldw	(0x01, sp), x
      000187 1E 01            [ 2]  543 	ldw	x, (0x01, sp)
      000189 7F               [ 1]  544 	clr	(x)
                                    545 ;	lib/TM1637.c: 97: TM1637_seg[1] = 0x00;
      00018A 1E 01            [ 2]  546 	ldw	x, (0x01, sp)
      00018C 5C               [ 2]  547 	incw	x
      00018D 7F               [ 1]  548 	clr	(x)
                                    549 ;	lib/TM1637.c: 98: TM1637_seg[2] = 0x00;
      00018E 1E 01            [ 2]  550 	ldw	x, (0x01, sp)
      000190 5C               [ 2]  551 	incw	x
      000191 5C               [ 2]  552 	incw	x
      000192 7F               [ 1]  553 	clr	(x)
                                    554 ;	lib/TM1637.c: 99: TM1637_seg[3] = 0x00;
      000193 1E 01            [ 2]  555 	ldw	x, (0x01, sp)
      000195 1C 00 03         [ 2]  556 	addw	x, #0x0003
      000198 7F               [ 1]  557 	clr	(x)
                                    558 ;	lib/TM1637.c: 100: TM1637_send();
      000199 CDr01r39         [ 4]  559 	call	_TM1637_send
      00019C 5B 02            [ 2]  560 	addw	sp, #2
      00019E 81               [ 4]  561 	ret
                                    562 ;	lib/TM1637.c: 103: void TM1637_initialization(){
                                    563 ;	-----------------------------------------
                                    564 ;	 function TM1637_initialization
                                    565 ;	-----------------------------------------
      00019F                        566 _TM1637_initialization:
                                    567 ;	lib/TM1637.c: 104: TM1637_ODR |= (1<<TM1637_SCL) | (1<<TM1637_SDA); 
      00019F AE 50 0A         [ 2]  568 	ldw	x, #0x500a
      0001A2 F6               [ 1]  569 	ld	a, (x)
      0001A3 AA 18            [ 1]  570 	or	a, #0x18
      0001A5 F7               [ 1]  571 	ld	(x), a
                                    572 ;	lib/TM1637.c: 107: TM1637_cleer();
      0001A6 CCr01r80         [ 2]  573 	jp	_TM1637_cleer
                                    574 ;	lib/TM1637.c: 110: void TM1637_dot(char d){
                                    575 ;	-----------------------------------------
                                    576 ;	 function TM1637_dot
                                    577 ;	-----------------------------------------
      0001A9                        578 _TM1637_dot:
                                    579 ;	lib/TM1637.c: 111: if(d == 1)TM1637_seg[1] = TM1637_seg[1] + 0x80; 
      0001A9 7B 03            [ 1]  580 	ld	a, (0x03, sp)
      0001AB A1 01            [ 1]  581 	cp	a, #0x01
      0001AD 26 07            [ 1]  582 	jrne	00103$
      0001AF AEr00r04         [ 2]  583 	ldw	x, #_TM1637_seg+1
      0001B2 F6               [ 1]  584 	ld	a, (x)
      0001B3 AB 80            [ 1]  585 	add	a, #0x80
      0001B5 F7               [ 1]  586 	ld	(x), a
      0001B6                        587 00103$:
      0001B6 81               [ 4]  588 	ret
                                    589 ;	lib/i2c.c: 16: unsigned char i2c_stop(void)
                                    590 ;	-----------------------------------------
                                    591 ;	 function i2c_stop
                                    592 ;	-----------------------------------------
      0001B7                        593 _i2c_stop:
      0001B7 88               [ 1]  594 	push	a
                                    595 ;	lib/i2c.c: 18: unsigned char error = 0;
      0001B8 0F 01            [ 1]  596 	clr	(0x01, sp)
                                    597 ;	lib/i2c.c: 20: NULL_SCL();
      0001BA AE 50 07         [ 2]  598 	ldw	x, #0x5007
      0001BD F6               [ 1]  599 	ld	a, (x)
      0001BE AA 10            [ 1]  600 	or	a, #0x10
      0001C0 F7               [ 1]  601 	ld	(x), a
      0001C1 AE 50 05         [ 2]  602 	ldw	x, #0x5005
      0001C4 F6               [ 1]  603 	ld	a, (x)
      0001C5 A4 EF            [ 1]  604 	and	a, #0xef
      0001C7 F7               [ 1]  605 	ld	(x), a
                                    606 ;	lib/i2c.c: 21: I2C_DELAY();
      0001C8 4B 05            [ 1]  607 	push	#0x05
      0001CA 5F               [ 1]  608 	clrw	x
      0001CB 89               [ 2]  609 	pushw	x
      0001CC 4B 00            [ 1]  610 	push	#0x00
      0001CE CDr00r00         [ 4]  611 	call	_delay
      0001D1 5B 04            [ 2]  612 	addw	sp, #4
                                    613 ;	lib/i2c.c: 22: NULL_SDA();
      0001D3 AE 50 07         [ 2]  614 	ldw	x, #0x5007
      0001D6 F6               [ 1]  615 	ld	a, (x)
      0001D7 AA 20            [ 1]  616 	or	a, #0x20
      0001D9 F7               [ 1]  617 	ld	(x), a
      0001DA AE 50 05         [ 2]  618 	ldw	x, #0x5005
      0001DD F6               [ 1]  619 	ld	a, (x)
      0001DE A4 DF            [ 1]  620 	and	a, #0xdf
      0001E0 F7               [ 1]  621 	ld	(x), a
                                    622 ;	lib/i2c.c: 23: I2C_DELAY();
      0001E1 4B 05            [ 1]  623 	push	#0x05
      0001E3 5F               [ 1]  624 	clrw	x
      0001E4 89               [ 2]  625 	pushw	x
      0001E5 4B 00            [ 1]  626 	push	#0x00
      0001E7 CDr00r00         [ 4]  627 	call	_delay
      0001EA 5B 04            [ 2]  628 	addw	sp, #4
                                    629 ;	lib/i2c.c: 25: ONE_SCL();
      0001EC AE 50 07         [ 2]  630 	ldw	x, #0x5007
      0001EF F6               [ 1]  631 	ld	a, (x)
      0001F0 A4 EF            [ 1]  632 	and	a, #0xef
      0001F2 F7               [ 1]  633 	ld	(x), a
      0001F3 AE 50 05         [ 2]  634 	ldw	x, #0x5005
      0001F6 F6               [ 1]  635 	ld	a, (x)
      0001F7 AA 10            [ 1]  636 	or	a, #0x10
      0001F9 F7               [ 1]  637 	ld	(x), a
                                    638 ;	lib/i2c.c: 26: I2C_DELAY();
      0001FA 4B 05            [ 1]  639 	push	#0x05
      0001FC 5F               [ 1]  640 	clrw	x
      0001FD 89               [ 2]  641 	pushw	x
      0001FE 4B 00            [ 1]  642 	push	#0x00
      000200 CDr00r00         [ 4]  643 	call	_delay
      000203 5B 04            [ 2]  644 	addw	sp, #4
                                    645 ;	lib/i2c.c: 27: ONE_SDA();
      000205 AE 50 07         [ 2]  646 	ldw	x, #0x5007
      000208 F6               [ 1]  647 	ld	a, (x)
      000209 A4 DF            [ 1]  648 	and	a, #0xdf
      00020B F7               [ 1]  649 	ld	(x), a
      00020C AE 50 05         [ 2]  650 	ldw	x, #0x5005
      00020F F6               [ 1]  651 	ld	a, (x)
      000210 AA 20            [ 1]  652 	or	a, #0x20
      000212 F7               [ 1]  653 	ld	(x), a
                                    654 ;	lib/i2c.c: 28: I2C_DELAY();
      000213 4B 05            [ 1]  655 	push	#0x05
      000215 5F               [ 1]  656 	clrw	x
      000216 89               [ 2]  657 	pushw	x
      000217 4B 00            [ 1]  658 	push	#0x00
      000219 CDr00r00         [ 4]  659 	call	_delay
      00021C 5B 04            [ 2]  660 	addw	sp, #4
                                    661 ;	lib/i2c.c: 30: if((I2C_IDR & (1 << I2C_SDA)) == 0) error = 2;
      00021E AE 50 06         [ 2]  662 	ldw	x, #0x5006
      000221 F6               [ 1]  663 	ld	a, (x)
      000222 A5 20            [ 1]  664 	bcp	a, #0x20
      000224 26 06            [ 1]  665 	jrne	00102$
      000226 88               [ 1]  666 	push	a
      000227 A6 02            [ 1]  667 	ld	a, #0x02
      000229 6B 02            [ 1]  668 	ld	(0x02, sp), a
      00022B 84               [ 1]  669 	pop	a
      00022C                        670 00102$:
                                    671 ;	lib/i2c.c: 31: if((I2C_IDR & (1 << I2C_SCL)) == 0) error |= 1;
      00022C A5 10            [ 1]  672 	bcp	a, #0x10
      00022E 26 06            [ 1]  673 	jrne	00104$
      000230 7B 01            [ 1]  674 	ld	a, (0x01, sp)
      000232 AA 01            [ 1]  675 	or	a, #0x01
      000234 6B 01            [ 1]  676 	ld	(0x01, sp), a
      000236                        677 00104$:
                                    678 ;	lib/i2c.c: 32: I2C_DELAY();
      000236 4B 05            [ 1]  679 	push	#0x05
      000238 5F               [ 1]  680 	clrw	x
      000239 89               [ 2]  681 	pushw	x
      00023A 4B 00            [ 1]  682 	push	#0x00
      00023C CDr00r00         [ 4]  683 	call	_delay
      00023F 5B 04            [ 2]  684 	addw	sp, #4
                                    685 ;	lib/i2c.c: 33: I2C_DELAY();
      000241 4B 05            [ 1]  686 	push	#0x05
      000243 5F               [ 1]  687 	clrw	x
      000244 89               [ 2]  688 	pushw	x
      000245 4B 00            [ 1]  689 	push	#0x00
      000247 CDr00r00         [ 4]  690 	call	_delay
      00024A 5B 04            [ 2]  691 	addw	sp, #4
                                    692 ;	lib/i2c.c: 34: I2C_DELAY();
      00024C 4B 05            [ 1]  693 	push	#0x05
      00024E 5F               [ 1]  694 	clrw	x
      00024F 89               [ 2]  695 	pushw	x
      000250 4B 00            [ 1]  696 	push	#0x00
      000252 CDr00r00         [ 4]  697 	call	_delay
      000255 5B 04            [ 2]  698 	addw	sp, #4
                                    699 ;	lib/i2c.c: 35: I2C_DELAY();
      000257 4B 05            [ 1]  700 	push	#0x05
      000259 5F               [ 1]  701 	clrw	x
      00025A 89               [ 2]  702 	pushw	x
      00025B 4B 00            [ 1]  703 	push	#0x00
      00025D CDr00r00         [ 4]  704 	call	_delay
      000260 5B 04            [ 2]  705 	addw	sp, #4
                                    706 ;	lib/i2c.c: 37: return error;
      000262 7B 01            [ 1]  707 	ld	a, (0x01, sp)
      000264 5B 01            [ 2]  708 	addw	sp, #1
      000266 81               [ 4]  709 	ret
                                    710 ;	lib/i2c.c: 44: void i2c_start(void)
                                    711 ;	-----------------------------------------
                                    712 ;	 function i2c_start
                                    713 ;	-----------------------------------------
      000267                        714 _i2c_start:
                                    715 ;	lib/i2c.c: 46: NULL_SDA();
      000267 AE 50 07         [ 2]  716 	ldw	x, #0x5007
      00026A F6               [ 1]  717 	ld	a, (x)
      00026B AA 20            [ 1]  718 	or	a, #0x20
      00026D F7               [ 1]  719 	ld	(x), a
      00026E AE 50 05         [ 2]  720 	ldw	x, #0x5005
      000271 F6               [ 1]  721 	ld	a, (x)
      000272 A4 DF            [ 1]  722 	and	a, #0xdf
      000274 F7               [ 1]  723 	ld	(x), a
                                    724 ;	lib/i2c.c: 47: I2C_DELAY();
      000275 4B 05            [ 1]  725 	push	#0x05
      000277 5F               [ 1]  726 	clrw	x
      000278 89               [ 2]  727 	pushw	x
      000279 4B 00            [ 1]  728 	push	#0x00
      00027B CDr00r00         [ 4]  729 	call	_delay
      00027E 5B 04            [ 2]  730 	addw	sp, #4
                                    731 ;	lib/i2c.c: 48: NULL_SCL();
      000280 AE 50 07         [ 2]  732 	ldw	x, #0x5007
      000283 F6               [ 1]  733 	ld	a, (x)
      000284 AA 10            [ 1]  734 	or	a, #0x10
      000286 F7               [ 1]  735 	ld	(x), a
      000287 AE 50 05         [ 2]  736 	ldw	x, #0x5005
      00028A F6               [ 1]  737 	ld	a, (x)
      00028B A4 EF            [ 1]  738 	and	a, #0xef
      00028D F7               [ 1]  739 	ld	(x), a
                                    740 ;	lib/i2c.c: 49: I2C_DELAY();
      00028E 4B 05            [ 1]  741 	push	#0x05
      000290 5F               [ 1]  742 	clrw	x
      000291 89               [ 2]  743 	pushw	x
      000292 4B 00            [ 1]  744 	push	#0x00
      000294 CDr00r00         [ 4]  745 	call	_delay
      000297 5B 04            [ 2]  746 	addw	sp, #4
      000299 81               [ 4]  747 	ret
                                    748 ;	lib/i2c.c: 56: void i2c_restart(void)
                                    749 ;	-----------------------------------------
                                    750 ;	 function i2c_restart
                                    751 ;	-----------------------------------------
      00029A                        752 _i2c_restart:
                                    753 ;	lib/i2c.c: 58: ONE_SDA();
      00029A AE 50 07         [ 2]  754 	ldw	x, #0x5007
      00029D F6               [ 1]  755 	ld	a, (x)
      00029E A4 DF            [ 1]  756 	and	a, #0xdf
      0002A0 F7               [ 1]  757 	ld	(x), a
      0002A1 AE 50 05         [ 2]  758 	ldw	x, #0x5005
      0002A4 F6               [ 1]  759 	ld	a, (x)
      0002A5 AA 20            [ 1]  760 	or	a, #0x20
      0002A7 F7               [ 1]  761 	ld	(x), a
                                    762 ;	lib/i2c.c: 59: I2C_DELAY();
      0002A8 4B 05            [ 1]  763 	push	#0x05
      0002AA 5F               [ 1]  764 	clrw	x
      0002AB 89               [ 2]  765 	pushw	x
      0002AC 4B 00            [ 1]  766 	push	#0x00
      0002AE CDr00r00         [ 4]  767 	call	_delay
      0002B1 5B 04            [ 2]  768 	addw	sp, #4
                                    769 ;	lib/i2c.c: 60: ONE_SCL();
      0002B3 AE 50 07         [ 2]  770 	ldw	x, #0x5007
      0002B6 F6               [ 1]  771 	ld	a, (x)
      0002B7 A4 EF            [ 1]  772 	and	a, #0xef
      0002B9 F7               [ 1]  773 	ld	(x), a
      0002BA AE 50 05         [ 2]  774 	ldw	x, #0x5005
      0002BD F6               [ 1]  775 	ld	a, (x)
      0002BE AA 10            [ 1]  776 	or	a, #0x10
      0002C0 F7               [ 1]  777 	ld	(x), a
                                    778 ;	lib/i2c.c: 61: I2C_DELAY();
      0002C1 4B 05            [ 1]  779 	push	#0x05
      0002C3 5F               [ 1]  780 	clrw	x
      0002C4 89               [ 2]  781 	pushw	x
      0002C5 4B 00            [ 1]  782 	push	#0x00
      0002C7 CDr00r00         [ 4]  783 	call	_delay
      0002CA 5B 04            [ 2]  784 	addw	sp, #4
                                    785 ;	lib/i2c.c: 63: NULL_SDA();
      0002CC AE 50 07         [ 2]  786 	ldw	x, #0x5007
      0002CF F6               [ 1]  787 	ld	a, (x)
      0002D0 AA 20            [ 1]  788 	or	a, #0x20
      0002D2 F7               [ 1]  789 	ld	(x), a
      0002D3 AE 50 05         [ 2]  790 	ldw	x, #0x5005
      0002D6 F6               [ 1]  791 	ld	a, (x)
      0002D7 A4 DF            [ 1]  792 	and	a, #0xdf
      0002D9 F7               [ 1]  793 	ld	(x), a
                                    794 ;	lib/i2c.c: 64: I2C_DELAY();
      0002DA 4B 05            [ 1]  795 	push	#0x05
      0002DC 5F               [ 1]  796 	clrw	x
      0002DD 89               [ 2]  797 	pushw	x
      0002DE 4B 00            [ 1]  798 	push	#0x00
      0002E0 CDr00r00         [ 4]  799 	call	_delay
      0002E3 5B 04            [ 2]  800 	addw	sp, #4
                                    801 ;	lib/i2c.c: 65: NULL_SCL();
      0002E5 AE 50 07         [ 2]  802 	ldw	x, #0x5007
      0002E8 F6               [ 1]  803 	ld	a, (x)
      0002E9 AA 10            [ 1]  804 	or	a, #0x10
      0002EB F7               [ 1]  805 	ld	(x), a
      0002EC AE 50 05         [ 2]  806 	ldw	x, #0x5005
      0002EF F6               [ 1]  807 	ld	a, (x)
      0002F0 A4 EF            [ 1]  808 	and	a, #0xef
      0002F2 F7               [ 1]  809 	ld	(x), a
                                    810 ;	lib/i2c.c: 66: I2C_DELAY();
      0002F3 4B 05            [ 1]  811 	push	#0x05
      0002F5 5F               [ 1]  812 	clrw	x
      0002F6 89               [ 2]  813 	pushw	x
      0002F7 4B 00            [ 1]  814 	push	#0x00
      0002F9 CDr00r00         [ 4]  815 	call	_delay
      0002FC 5B 04            [ 2]  816 	addw	sp, #4
      0002FE 81               [ 4]  817 	ret
                                    818 ;	lib/i2c.c: 73: void i2c_init(void)
                                    819 ;	-----------------------------------------
                                    820 ;	 function i2c_init
                                    821 ;	-----------------------------------------
      0002FF                        822 _i2c_init:
                                    823 ;	lib/i2c.c: 75: ONE_SDA();
      0002FF AE 50 07         [ 2]  824 	ldw	x, #0x5007
      000302 F6               [ 1]  825 	ld	a, (x)
      000303 A4 DF            [ 1]  826 	and	a, #0xdf
      000305 F7               [ 1]  827 	ld	(x), a
      000306 AE 50 05         [ 2]  828 	ldw	x, #0x5005
      000309 F6               [ 1]  829 	ld	a, (x)
      00030A AA 20            [ 1]  830 	or	a, #0x20
      00030C F7               [ 1]  831 	ld	(x), a
                                    832 ;	lib/i2c.c: 76: ONE_SCL();
      00030D AE 50 07         [ 2]  833 	ldw	x, #0x5007
      000310 F6               [ 1]  834 	ld	a, (x)
      000311 A4 EF            [ 1]  835 	and	a, #0xef
      000313 F7               [ 1]  836 	ld	(x), a
      000314 AE 50 05         [ 2]  837 	ldw	x, #0x5005
      000317 F6               [ 1]  838 	ld	a, (x)
      000318 AA 10            [ 1]  839 	or	a, #0x10
      00031A F7               [ 1]  840 	ld	(x), a
                                    841 ;	lib/i2c.c: 78: i2c_stop();
      00031B CCr01rB7         [ 2]  842 	jp	_i2c_stop
                                    843 ;	lib/i2c.c: 85: unsigned char i2c_send_byte(unsigned char data)
                                    844 ;	-----------------------------------------
                                    845 ;	 function i2c_send_byte
                                    846 ;	-----------------------------------------
      00031E                        847 _i2c_send_byte:
      00031E 52 02            [ 2]  848 	sub	sp, #2
                                    849 ;	lib/i2c.c: 90: for(i = 0; i < 8; i++)
      000320 0F 01            [ 1]  850 	clr	(0x01, sp)
      000322                        851 00108$:
                                    852 ;	lib/i2c.c: 94: NULL_SDA();
      000322 AE 50 07         [ 2]  853 	ldw	x, #0x5007
      000325 F6               [ 1]  854 	ld	a, (x)
                                    855 ;	lib/i2c.c: 92: if((data & 0x80) == 0)
      000326 0D 05            [ 1]  856 	tnz	(0x05, sp)
      000328 2B 0F            [ 1]  857 	jrmi	00102$
                                    858 ;	lib/i2c.c: 94: NULL_SDA();
      00032A AA 20            [ 1]  859 	or	a, #0x20
      00032C AE 50 07         [ 2]  860 	ldw	x, #0x5007
      00032F F7               [ 1]  861 	ld	(x), a
      000330 AE 50 05         [ 2]  862 	ldw	x, #0x5005
      000333 F6               [ 1]  863 	ld	a, (x)
      000334 A4 DF            [ 1]  864 	and	a, #0xdf
      000336 F7               [ 1]  865 	ld	(x), a
      000337 20 0D            [ 2]  866 	jra	00103$
      000339                        867 00102$:
                                    868 ;	lib/i2c.c: 98: ONE_SDA();
      000339 A4 DF            [ 1]  869 	and	a, #0xdf
      00033B AE 50 07         [ 2]  870 	ldw	x, #0x5007
      00033E F7               [ 1]  871 	ld	(x), a
      00033F AE 50 05         [ 2]  872 	ldw	x, #0x5005
      000342 F6               [ 1]  873 	ld	a, (x)
      000343 AA 20            [ 1]  874 	or	a, #0x20
      000345 F7               [ 1]  875 	ld	(x), a
      000346                        876 00103$:
                                    877 ;	lib/i2c.c: 100: I2C_DELAY();
      000346 4B 05            [ 1]  878 	push	#0x05
      000348 5F               [ 1]  879 	clrw	x
      000349 89               [ 2]  880 	pushw	x
      00034A 4B 00            [ 1]  881 	push	#0x00
      00034C CDr00r00         [ 4]  882 	call	_delay
      00034F 5B 04            [ 2]  883 	addw	sp, #4
                                    884 ;	lib/i2c.c: 101: ONE_SCL();
      000351 AE 50 07         [ 2]  885 	ldw	x, #0x5007
      000354 F6               [ 1]  886 	ld	a, (x)
      000355 A4 EF            [ 1]  887 	and	a, #0xef
      000357 F7               [ 1]  888 	ld	(x), a
      000358 AE 50 05         [ 2]  889 	ldw	x, #0x5005
      00035B F6               [ 1]  890 	ld	a, (x)
      00035C AA 10            [ 1]  891 	or	a, #0x10
      00035E F7               [ 1]  892 	ld	(x), a
                                    893 ;	lib/i2c.c: 102: I2C_DELAY();
      00035F 4B 05            [ 1]  894 	push	#0x05
      000361 5F               [ 1]  895 	clrw	x
      000362 89               [ 2]  896 	pushw	x
      000363 4B 00            [ 1]  897 	push	#0x00
      000365 CDr00r00         [ 4]  898 	call	_delay
      000368 5B 04            [ 2]  899 	addw	sp, #4
                                    900 ;	lib/i2c.c: 103: NULL_SCL();
      00036A AE 50 07         [ 2]  901 	ldw	x, #0x5007
      00036D F6               [ 1]  902 	ld	a, (x)
      00036E AA 10            [ 1]  903 	or	a, #0x10
      000370 F7               [ 1]  904 	ld	(x), a
      000371 AE 50 05         [ 2]  905 	ldw	x, #0x5005
      000374 F6               [ 1]  906 	ld	a, (x)
      000375 A4 EF            [ 1]  907 	and	a, #0xef
      000377 F7               [ 1]  908 	ld	(x), a
                                    909 ;	lib/i2c.c: 105: data = (data << 1);
      000378 08 05            [ 1]  910 	sll	(0x05, sp)
                                    911 ;	lib/i2c.c: 90: for(i = 0; i < 8; i++)
      00037A 0C 01            [ 1]  912 	inc	(0x01, sp)
      00037C 7B 01            [ 1]  913 	ld	a, (0x01, sp)
      00037E A1 08            [ 1]  914 	cp	a, #0x08
      000380 25 A0            [ 1]  915 	jrc	00108$
                                    916 ;	lib/i2c.c: 108: ONE_SDA();
      000382 AE 50 07         [ 2]  917 	ldw	x, #0x5007
      000385 F6               [ 1]  918 	ld	a, (x)
      000386 A4 DF            [ 1]  919 	and	a, #0xdf
      000388 F7               [ 1]  920 	ld	(x), a
      000389 AE 50 05         [ 2]  921 	ldw	x, #0x5005
      00038C F6               [ 1]  922 	ld	a, (x)
      00038D AA 20            [ 1]  923 	or	a, #0x20
      00038F F7               [ 1]  924 	ld	(x), a
                                    925 ;	lib/i2c.c: 109: I2C_DELAY();
      000390 4B 05            [ 1]  926 	push	#0x05
      000392 5F               [ 1]  927 	clrw	x
      000393 89               [ 2]  928 	pushw	x
      000394 4B 00            [ 1]  929 	push	#0x00
      000396 CDr00r00         [ 4]  930 	call	_delay
      000399 5B 04            [ 2]  931 	addw	sp, #4
                                    932 ;	lib/i2c.c: 110: ONE_SCL();
      00039B AE 50 07         [ 2]  933 	ldw	x, #0x5007
      00039E F6               [ 1]  934 	ld	a, (x)
      00039F A4 EF            [ 1]  935 	and	a, #0xef
      0003A1 F7               [ 1]  936 	ld	(x), a
      0003A2 AE 50 05         [ 2]  937 	ldw	x, #0x5005
      0003A5 F6               [ 1]  938 	ld	a, (x)
      0003A6 AA 10            [ 1]  939 	or	a, #0x10
      0003A8 F7               [ 1]  940 	ld	(x), a
                                    941 ;	lib/i2c.c: 111: I2C_DELAY();
      0003A9 4B 05            [ 1]  942 	push	#0x05
      0003AB 5F               [ 1]  943 	clrw	x
      0003AC 89               [ 2]  944 	pushw	x
      0003AD 4B 00            [ 1]  945 	push	#0x00
      0003AF CDr00r00         [ 4]  946 	call	_delay
      0003B2 5B 04            [ 2]  947 	addw	sp, #4
                                    948 ;	lib/i2c.c: 113: if((I2C_IDR & (1 << I2C_SDA)) == (1 << I2C_SDA))
      0003B4 AE 50 06         [ 2]  949 	ldw	x, #0x5006
      0003B7 F6               [ 1]  950 	ld	a, (x)
      0003B8 A4 20            [ 1]  951 	and	a, #0x20
      0003BA A1 20            [ 1]  952 	cp	a, #0x20
      0003BC 26 06            [ 1]  953 	jrne	00106$
                                    954 ;	lib/i2c.c: 115: ask = NACK;
      0003BE A6 01            [ 1]  955 	ld	a, #0x01
      0003C0 6B 02            [ 1]  956 	ld	(0x02, sp), a
      0003C2 20 02            [ 2]  957 	jra	00107$
      0003C4                        958 00106$:
                                    959 ;	lib/i2c.c: 119: ask = ACK;
      0003C4 0F 02            [ 1]  960 	clr	(0x02, sp)
      0003C6                        961 00107$:
                                    962 ;	lib/i2c.c: 122: NULL_SCL();
      0003C6 AE 50 07         [ 2]  963 	ldw	x, #0x5007
      0003C9 F6               [ 1]  964 	ld	a, (x)
      0003CA AA 10            [ 1]  965 	or	a, #0x10
      0003CC F7               [ 1]  966 	ld	(x), a
      0003CD AE 50 05         [ 2]  967 	ldw	x, #0x5005
      0003D0 F6               [ 1]  968 	ld	a, (x)
      0003D1 A4 EF            [ 1]  969 	and	a, #0xef
      0003D3 F7               [ 1]  970 	ld	(x), a
                                    971 ;	lib/i2c.c: 124: return ask;
      0003D4 7B 02            [ 1]  972 	ld	a, (0x02, sp)
      0003D6 5B 02            [ 2]  973 	addw	sp, #2
      0003D8 81               [ 4]  974 	ret
                                    975 ;	lib/i2c.c: 131: unsigned char i2c_read_byte(unsigned char ask)
                                    976 ;	-----------------------------------------
                                    977 ;	 function i2c_read_byte
                                    978 ;	-----------------------------------------
      0003D9                        979 _i2c_read_byte:
      0003D9 52 02            [ 2]  980 	sub	sp, #2
                                    981 ;	lib/i2c.c: 133: unsigned char byte = 0;
      0003DB 0F 01            [ 1]  982 	clr	(0x01, sp)
                                    983 ;	lib/i2c.c: 136: ONE_SDA();
      0003DD AE 50 07         [ 2]  984 	ldw	x, #0x5007
      0003E0 F6               [ 1]  985 	ld	a, (x)
      0003E1 A4 DF            [ 1]  986 	and	a, #0xdf
      0003E3 F7               [ 1]  987 	ld	(x), a
      0003E4 AE 50 05         [ 2]  988 	ldw	x, #0x5005
      0003E7 F6               [ 1]  989 	ld	a, (x)
      0003E8 AA 20            [ 1]  990 	or	a, #0x20
      0003EA F7               [ 1]  991 	ld	(x), a
                                    992 ;	lib/i2c.c: 138: for(i = 0; i < 8; i++)
      0003EB 0F 02            [ 1]  993 	clr	(0x02, sp)
      0003ED                        994 00107$:
                                    995 ;	lib/i2c.c: 140: byte = (byte << 1);
      0003ED 08 01            [ 1]  996 	sll	(0x01, sp)
                                    997 ;	lib/i2c.c: 141: ONE_SCL();
      0003EF AE 50 07         [ 2]  998 	ldw	x, #0x5007
      0003F2 F6               [ 1]  999 	ld	a, (x)
      0003F3 A4 EF            [ 1] 1000 	and	a, #0xef
      0003F5 F7               [ 1] 1001 	ld	(x), a
      0003F6 AE 50 05         [ 2] 1002 	ldw	x, #0x5005
      0003F9 F6               [ 1] 1003 	ld	a, (x)
      0003FA AA 10            [ 1] 1004 	or	a, #0x10
      0003FC F7               [ 1] 1005 	ld	(x), a
                                   1006 ;	lib/i2c.c: 142: I2C_DELAY();
      0003FD 4B 05            [ 1] 1007 	push	#0x05
      0003FF 5F               [ 1] 1008 	clrw	x
      000400 89               [ 2] 1009 	pushw	x
      000401 4B 00            [ 1] 1010 	push	#0x00
      000403 CDr00r00         [ 4] 1011 	call	_delay
      000406 5B 04            [ 2] 1012 	addw	sp, #4
                                   1013 ;	lib/i2c.c: 143: if((I2C_IDR & (1 << I2C_SDA)) == (1 << I2C_SDA)) byte |= 0x01;
      000408 AE 50 06         [ 2] 1014 	ldw	x, #0x5006
      00040B F6               [ 1] 1015 	ld	a, (x)
      00040C A4 20            [ 1] 1016 	and	a, #0x20
      00040E A1 20            [ 1] 1017 	cp	a, #0x20
      000410 26 06            [ 1] 1018 	jrne	00102$
      000412 7B 01            [ 1] 1019 	ld	a, (0x01, sp)
      000414 AA 01            [ 1] 1020 	or	a, #0x01
      000416 6B 01            [ 1] 1021 	ld	(0x01, sp), a
      000418                       1022 00102$:
                                   1023 ;	lib/i2c.c: 144: NULL_SCL();
      000418 AE 50 07         [ 2] 1024 	ldw	x, #0x5007
      00041B F6               [ 1] 1025 	ld	a, (x)
      00041C AA 10            [ 1] 1026 	or	a, #0x10
      00041E F7               [ 1] 1027 	ld	(x), a
      00041F AE 50 05         [ 2] 1028 	ldw	x, #0x5005
      000422 F6               [ 1] 1029 	ld	a, (x)
      000423 A4 EF            [ 1] 1030 	and	a, #0xef
      000425 F7               [ 1] 1031 	ld	(x), a
                                   1032 ;	lib/i2c.c: 145: I2C_DELAY();
      000426 4B 05            [ 1] 1033 	push	#0x05
      000428 5F               [ 1] 1034 	clrw	x
      000429 89               [ 2] 1035 	pushw	x
      00042A 4B 00            [ 1] 1036 	push	#0x00
      00042C CDr00r00         [ 4] 1037 	call	_delay
      00042F 5B 04            [ 2] 1038 	addw	sp, #4
                                   1039 ;	lib/i2c.c: 138: for(i = 0; i < 8; i++)
      000431 0C 02            [ 1] 1040 	inc	(0x02, sp)
      000433 7B 02            [ 1] 1041 	ld	a, (0x02, sp)
      000435 A1 08            [ 1] 1042 	cp	a, #0x08
      000437 25 B4            [ 1] 1043 	jrc	00107$
                                   1044 ;	lib/i2c.c: 136: ONE_SDA();
      000439 AE 50 07         [ 2] 1045 	ldw	x, #0x5007
      00043C F6               [ 1] 1046 	ld	a, (x)
                                   1047 ;	lib/i2c.c: 148: if(ask == ACK)
      00043D 0D 05            [ 1] 1048 	tnz	(0x05, sp)
      00043F 26 0F            [ 1] 1049 	jrne	00105$
                                   1050 ;	lib/i2c.c: 150: NULL_SDA();
      000441 AA 20            [ 1] 1051 	or	a, #0x20
      000443 AE 50 07         [ 2] 1052 	ldw	x, #0x5007
      000446 F7               [ 1] 1053 	ld	(x), a
      000447 AE 50 05         [ 2] 1054 	ldw	x, #0x5005
      00044A F6               [ 1] 1055 	ld	a, (x)
      00044B A4 DF            [ 1] 1056 	and	a, #0xdf
      00044D F7               [ 1] 1057 	ld	(x), a
      00044E 20 0D            [ 2] 1058 	jra	00106$
      000450                       1059 00105$:
                                   1060 ;	lib/i2c.c: 154: ONE_SDA();
      000450 A4 DF            [ 1] 1061 	and	a, #0xdf
      000452 AE 50 07         [ 2] 1062 	ldw	x, #0x5007
      000455 F7               [ 1] 1063 	ld	(x), a
      000456 AE 50 05         [ 2] 1064 	ldw	x, #0x5005
      000459 F6               [ 1] 1065 	ld	a, (x)
      00045A AA 20            [ 1] 1066 	or	a, #0x20
      00045C F7               [ 1] 1067 	ld	(x), a
      00045D                       1068 00106$:
                                   1069 ;	lib/i2c.c: 156: I2C_DELAY();
      00045D 4B 05            [ 1] 1070 	push	#0x05
      00045F 5F               [ 1] 1071 	clrw	x
      000460 89               [ 2] 1072 	pushw	x
      000461 4B 00            [ 1] 1073 	push	#0x00
      000463 CDr00r00         [ 4] 1074 	call	_delay
      000466 5B 04            [ 2] 1075 	addw	sp, #4
                                   1076 ;	lib/i2c.c: 157: ONE_SCL();
      000468 AE 50 07         [ 2] 1077 	ldw	x, #0x5007
      00046B F6               [ 1] 1078 	ld	a, (x)
      00046C A4 EF            [ 1] 1079 	and	a, #0xef
      00046E F7               [ 1] 1080 	ld	(x), a
      00046F AE 50 05         [ 2] 1081 	ldw	x, #0x5005
      000472 F6               [ 1] 1082 	ld	a, (x)
      000473 AA 10            [ 1] 1083 	or	a, #0x10
      000475 F7               [ 1] 1084 	ld	(x), a
                                   1085 ;	lib/i2c.c: 158: I2C_DELAY();
      000476 4B 05            [ 1] 1086 	push	#0x05
      000478 5F               [ 1] 1087 	clrw	x
      000479 89               [ 2] 1088 	pushw	x
      00047A 4B 00            [ 1] 1089 	push	#0x00
      00047C CDr00r00         [ 4] 1090 	call	_delay
      00047F 5B 04            [ 2] 1091 	addw	sp, #4
                                   1092 ;	lib/i2c.c: 159: NULL_SCL();
      000481 AE 50 07         [ 2] 1093 	ldw	x, #0x5007
      000484 F6               [ 1] 1094 	ld	a, (x)
      000485 AA 10            [ 1] 1095 	or	a, #0x10
      000487 F7               [ 1] 1096 	ld	(x), a
      000488 AE 50 05         [ 2] 1097 	ldw	x, #0x5005
      00048B F6               [ 1] 1098 	ld	a, (x)
      00048C A4 EF            [ 1] 1099 	and	a, #0xef
      00048E F7               [ 1] 1100 	ld	(x), a
                                   1101 ;	lib/i2c.c: 160: I2C_DELAY();
      00048F 4B 05            [ 1] 1102 	push	#0x05
      000491 5F               [ 1] 1103 	clrw	x
      000492 89               [ 2] 1104 	pushw	x
      000493 4B 00            [ 1] 1105 	push	#0x00
      000495 CDr00r00         [ 4] 1106 	call	_delay
      000498 5B 04            [ 2] 1107 	addw	sp, #4
                                   1108 ;	lib/i2c.c: 161: ONE_SDA();
      00049A AE 50 07         [ 2] 1109 	ldw	x, #0x5007
      00049D F6               [ 1] 1110 	ld	a, (x)
      00049E A4 DF            [ 1] 1111 	and	a, #0xdf
      0004A0 F7               [ 1] 1112 	ld	(x), a
      0004A1 AE 50 05         [ 2] 1113 	ldw	x, #0x5005
      0004A4 F6               [ 1] 1114 	ld	a, (x)
      0004A5 AA 20            [ 1] 1115 	or	a, #0x20
      0004A7 F7               [ 1] 1116 	ld	(x), a
                                   1117 ;	lib/i2c.c: 163: return byte;
      0004A8 7B 01            [ 1] 1118 	ld	a, (0x01, sp)
      0004AA 5B 02            [ 2] 1119 	addw	sp, #2
      0004AC 81               [ 4] 1120 	ret
                                   1121 ;	lib/rtc.c: 3: unsigned char RTC_ConvertFromDec(unsigned char c){
                                   1122 ;	-----------------------------------------
                                   1123 ;	 function RTC_ConvertFromDec
                                   1124 ;	-----------------------------------------
      0004AD                       1125 _RTC_ConvertFromDec:
      0004AD 88               [ 1] 1126 	push	a
                                   1127 ;	lib/rtc.c: 4: unsigned char ch = ((c>>4)*10+(0b00001111&c));
      0004AE 7B 04            [ 1] 1128 	ld	a, (0x04, sp)
      0004B0 4E               [ 1] 1129 	swap	a
      0004B1 A4 0F            [ 1] 1130 	and	a, #0x0f
      0004B3 41               [ 1] 1131 	exg	a, xl
      0004B4 A6 0A            [ 1] 1132 	ld	a, #0x0a
      0004B6 41               [ 1] 1133 	exg	a, xl
      0004B7 42               [ 4] 1134 	mul	x, a
      0004B8 7B 04            [ 1] 1135 	ld	a, (0x04, sp)
      0004BA A4 0F            [ 1] 1136 	and	a, #0x0f
      0004BC 6B 01            [ 1] 1137 	ld	(0x01, sp), a
      0004BE 9F               [ 1] 1138 	ld	a, xl
      0004BF 1B 01            [ 1] 1139 	add	a, (0x01, sp)
                                   1140 ;	lib/rtc.c: 5: return ch;
      0004C1 5B 01            [ 2] 1141 	addw	sp, #1
      0004C3 81               [ 4] 1142 	ret
                                   1143 ;	lib/rtc.c: 8: unsigned char RTC_ConvertFromBinDec(unsigned char c){
                                   1144 ;	-----------------------------------------
                                   1145 ;	 function RTC_ConvertFromBinDec
                                   1146 ;	-----------------------------------------
      0004C4                       1147 _RTC_ConvertFromBinDec:
      0004C4 88               [ 1] 1148 	push	a
                                   1149 ;	lib/rtc.c: 9: unsigned char ch = ((c/10)<<4)|(c%10);
      0004C5 5F               [ 1] 1150 	clrw	x
      0004C6 7B 04            [ 1] 1151 	ld	a, (0x04, sp)
      0004C8 97               [ 1] 1152 	ld	xl, a
      0004C9 A6 0A            [ 1] 1153 	ld	a, #0x0a
      0004CB 62               [ 2] 1154 	div	x, a
      0004CC 9F               [ 1] 1155 	ld	a, xl
      0004CD 4E               [ 1] 1156 	swap	a
      0004CE A4 F0            [ 1] 1157 	and	a, #0xf0
      0004D0 6B 01            [ 1] 1158 	ld	(0x01, sp), a
      0004D2 5F               [ 1] 1159 	clrw	x
      0004D3 7B 04            [ 1] 1160 	ld	a, (0x04, sp)
      0004D5 97               [ 1] 1161 	ld	xl, a
      0004D6 A6 0A            [ 1] 1162 	ld	a, #0x0a
      0004D8 62               [ 2] 1163 	div	x, a
      0004D9 1A 01            [ 1] 1164 	or	a, (0x01, sp)
                                   1165 ;	lib/rtc.c: 10: return ch;
      0004DB 5B 01            [ 2] 1166 	addw	sp, #1
      0004DD 81               [ 4] 1167 	ret
                                   1168 ;	lib/rtc.c: 13: void RTC_Read(){
                                   1169 ;	-----------------------------------------
                                   1170 ;	 function RTC_Read
                                   1171 ;	-----------------------------------------
      0004DE                       1172 _RTC_Read:
                                   1173 ;	lib/rtc.c: 16: i2c_start();
      0004DE CDr02r67         [ 4] 1174 	call	_i2c_start
                                   1175 ;	lib/rtc.c: 17: i2c_send_byte(0xD0);
      0004E1 4B D0            [ 1] 1176 	push	#0xd0
      0004E3 CDr03r1E         [ 4] 1177 	call	_i2c_send_byte
      0004E6 84               [ 1] 1178 	pop	a
                                   1179 ;	lib/rtc.c: 18: i2c_send_byte(0x00);
      0004E7 4B 00            [ 1] 1180 	push	#0x00
      0004E9 CDr03r1E         [ 4] 1181 	call	_i2c_send_byte
      0004EC 84               [ 1] 1182 	pop	a
                                   1183 ;	lib/rtc.c: 19: i2c_restart();
      0004ED CDr02r9A         [ 4] 1184 	call	_i2c_restart
                                   1185 ;	lib/rtc.c: 20: i2c_send_byte(0xD1);
      0004F0 4B D1            [ 1] 1186 	push	#0xd1
      0004F2 CDr03r1E         [ 4] 1187 	call	_i2c_send_byte
      0004F5 84               [ 1] 1188 	pop	a
                                   1189 ;	lib/rtc.c: 21: sec		= i2c_read_byte(0);
      0004F6 4B 00            [ 1] 1190 	push	#0x00
      0004F8 CDr03rD9         [ 4] 1191 	call	_i2c_read_byte
      0004FB 5B 01            [ 2] 1192 	addw	sp, #1
      0004FD C7u00u00         [ 1] 1193 	ld	_sec+0, a
                                   1194 ;	lib/rtc.c: 22: min		= i2c_read_byte(0);
      000500 4B 00            [ 1] 1195 	push	#0x00
      000502 CDr03rD9         [ 4] 1196 	call	_i2c_read_byte
      000505 5B 01            [ 2] 1197 	addw	sp, #1
      000507 C7u00u01         [ 1] 1198 	ld	_min+0, a
                                   1199 ;	lib/rtc.c: 23: hour	= i2c_read_byte(0);
      00050A 4B 00            [ 1] 1200 	push	#0x00
      00050C CDr03rD9         [ 4] 1201 	call	_i2c_read_byte
      00050F 5B 01            [ 2] 1202 	addw	sp, #1
      000511 C7u00u02         [ 1] 1203 	ld	_hour+0, a
                                   1204 ;	lib/rtc.c: 24: day		= i2c_read_byte(0);
      000514 4B 00            [ 1] 1205 	push	#0x00
      000516 CDr03rD9         [ 4] 1206 	call	_i2c_read_byte
      000519 5B 01            [ 2] 1207 	addw	sp, #1
      00051B C7u00u03         [ 1] 1208 	ld	_day+0, a
                                   1209 ;	lib/rtc.c: 25: date	= i2c_read_byte(0);
      00051E 4B 00            [ 1] 1210 	push	#0x00
      000520 CDr03rD9         [ 4] 1211 	call	_i2c_read_byte
      000523 5B 01            [ 2] 1212 	addw	sp, #1
      000525 C7u00u04         [ 1] 1213 	ld	_date+0, a
                                   1214 ;	lib/rtc.c: 26: month	= i2c_read_byte(0);
      000528 4B 00            [ 1] 1215 	push	#0x00
      00052A CDr03rD9         [ 4] 1216 	call	_i2c_read_byte
      00052D 5B 01            [ 2] 1217 	addw	sp, #1
      00052F C7u00u05         [ 1] 1218 	ld	_month+0, a
                                   1219 ;	lib/rtc.c: 27: year	= i2c_read_byte(1);
      000532 4B 01            [ 1] 1220 	push	#0x01
      000534 CDr03rD9         [ 4] 1221 	call	_i2c_read_byte
      000537 5B 01            [ 2] 1222 	addw	sp, #1
      000539 C7u00u06         [ 1] 1223 	ld	_year+0, a
                                   1224 ;	lib/rtc.c: 28: i2c_stop();
      00053C CDr01rB7         [ 4] 1225 	call	_i2c_stop
                                   1226 ;	lib/rtc.c: 30: sec		= RTC_ConvertFromDec(sec);
      00053F 3Bu00u00         [ 1] 1227 	push	_sec+0
      000542 CDr04rAD         [ 4] 1228 	call	_RTC_ConvertFromDec
      000545 5B 01            [ 2] 1229 	addw	sp, #1
      000547 C7u00u00         [ 1] 1230 	ld	_sec+0, a
                                   1231 ;	lib/rtc.c: 31: min		= RTC_ConvertFromDec(min);
      00054A 3Bu00u01         [ 1] 1232 	push	_min+0
      00054D CDr04rAD         [ 4] 1233 	call	_RTC_ConvertFromDec
      000550 5B 01            [ 2] 1234 	addw	sp, #1
      000552 C7u00u01         [ 1] 1235 	ld	_min+0, a
                                   1236 ;	lib/rtc.c: 32: hour	= RTC_ConvertFromDec(hour);
      000555 3Bu00u02         [ 1] 1237 	push	_hour+0
      000558 CDr04rAD         [ 4] 1238 	call	_RTC_ConvertFromDec
      00055B 5B 01            [ 2] 1239 	addw	sp, #1
      00055D C7u00u02         [ 1] 1240 	ld	_hour+0, a
                                   1241 ;	lib/rtc.c: 33: day		= RTC_ConvertFromDec(day);
      000560 3Bu00u03         [ 1] 1242 	push	_day+0
      000563 CDr04rAD         [ 4] 1243 	call	_RTC_ConvertFromDec
      000566 5B 01            [ 2] 1244 	addw	sp, #1
      000568 C7u00u03         [ 1] 1245 	ld	_day+0, a
                                   1246 ;	lib/rtc.c: 34: date	= RTC_ConvertFromDec(date);
      00056B 3Bu00u04         [ 1] 1247 	push	_date+0
      00056E CDr04rAD         [ 4] 1248 	call	_RTC_ConvertFromDec
      000571 5B 01            [ 2] 1249 	addw	sp, #1
      000573 C7u00u04         [ 1] 1250 	ld	_date+0, a
                                   1251 ;	lib/rtc.c: 35: month	= RTC_ConvertFromDec(month);
      000576 3Bu00u05         [ 1] 1252 	push	_month+0
      000579 CDr04rAD         [ 4] 1253 	call	_RTC_ConvertFromDec
      00057C 5B 01            [ 2] 1254 	addw	sp, #1
      00057E C7u00u05         [ 1] 1255 	ld	_month+0, a
                                   1256 ;	lib/rtc.c: 36: year	= RTC_ConvertFromDec(year);
      000581 3Bu00u06         [ 1] 1257 	push	_year+0
      000584 CDr04rAD         [ 4] 1258 	call	_RTC_ConvertFromDec
      000587 5B 01            [ 2] 1259 	addw	sp, #1
      000589 C7u00u06         [ 1] 1260 	ld	_year+0, a
      00058C 81               [ 4] 1261 	ret
                                   1262 ;	lib/rtc.c: 40: void RTC_Set(unsigned char sec, unsigned char min, unsigned char hour, unsigned char day, unsigned char date, unsigned char month, unsigned char year){
                                   1263 ;	-----------------------------------------
                                   1264 ;	 function RTC_Set
                                   1265 ;	-----------------------------------------
      00058D                       1266 _RTC_Set:
      00058D 52 07            [ 2] 1267 	sub	sp, #7
                                   1268 ;	lib/rtc.c: 41: sec		= RTC_ConvertFromBinDec(sec);
      00058F 7B 0A            [ 1] 1269 	ld	a, (0x0a, sp)
      000591 88               [ 1] 1270 	push	a
      000592 CDr04rC4         [ 4] 1271 	call	_RTC_ConvertFromBinDec
      000595 5B 01            [ 2] 1272 	addw	sp, #1
      000597 6B 01            [ 1] 1273 	ld	(0x01, sp), a
                                   1274 ;	lib/rtc.c: 42: min		= RTC_ConvertFromBinDec(min);
      000599 7B 0B            [ 1] 1275 	ld	a, (0x0b, sp)
      00059B 88               [ 1] 1276 	push	a
      00059C CDr04rC4         [ 4] 1277 	call	_RTC_ConvertFromBinDec
      00059F 5B 01            [ 2] 1278 	addw	sp, #1
      0005A1 6B 07            [ 1] 1279 	ld	(0x07, sp), a
                                   1280 ;	lib/rtc.c: 43: hour	= RTC_ConvertFromBinDec(hour);
      0005A3 7B 0C            [ 1] 1281 	ld	a, (0x0c, sp)
      0005A5 88               [ 1] 1282 	push	a
      0005A6 CDr04rC4         [ 4] 1283 	call	_RTC_ConvertFromBinDec
      0005A9 5B 01            [ 2] 1284 	addw	sp, #1
      0005AB 6B 06            [ 1] 1285 	ld	(0x06, sp), a
                                   1286 ;	lib/rtc.c: 44: day		= RTC_ConvertFromBinDec(day);
      0005AD 7B 0D            [ 1] 1287 	ld	a, (0x0d, sp)
      0005AF 88               [ 1] 1288 	push	a
      0005B0 CDr04rC4         [ 4] 1289 	call	_RTC_ConvertFromBinDec
      0005B3 5B 01            [ 2] 1290 	addw	sp, #1
      0005B5 6B 05            [ 1] 1291 	ld	(0x05, sp), a
                                   1292 ;	lib/rtc.c: 45: date	= RTC_ConvertFromBinDec(date);
      0005B7 7B 0E            [ 1] 1293 	ld	a, (0x0e, sp)
      0005B9 88               [ 1] 1294 	push	a
      0005BA CDr04rC4         [ 4] 1295 	call	_RTC_ConvertFromBinDec
      0005BD 5B 01            [ 2] 1296 	addw	sp, #1
      0005BF 6B 04            [ 1] 1297 	ld	(0x04, sp), a
                                   1298 ;	lib/rtc.c: 46: month	= RTC_ConvertFromBinDec(month);
      0005C1 7B 0F            [ 1] 1299 	ld	a, (0x0f, sp)
      0005C3 88               [ 1] 1300 	push	a
      0005C4 CDr04rC4         [ 4] 1301 	call	_RTC_ConvertFromBinDec
      0005C7 5B 01            [ 2] 1302 	addw	sp, #1
      0005C9 6B 03            [ 1] 1303 	ld	(0x03, sp), a
                                   1304 ;	lib/rtc.c: 47: year	= RTC_ConvertFromBinDec(year);
      0005CB 7B 10            [ 1] 1305 	ld	a, (0x10, sp)
      0005CD 88               [ 1] 1306 	push	a
      0005CE CDr04rC4         [ 4] 1307 	call	_RTC_ConvertFromBinDec
      0005D1 5B 01            [ 2] 1308 	addw	sp, #1
      0005D3 6B 02            [ 1] 1309 	ld	(0x02, sp), a
                                   1310 ;	lib/rtc.c: 49: i2c_start();
      0005D5 CDr02r67         [ 4] 1311 	call	_i2c_start
                                   1312 ;	lib/rtc.c: 50: i2c_send_byte(0xD0);
      0005D8 4B D0            [ 1] 1313 	push	#0xd0
      0005DA CDr03r1E         [ 4] 1314 	call	_i2c_send_byte
      0005DD 84               [ 1] 1315 	pop	a
                                   1316 ;	lib/rtc.c: 51: i2c_send_byte(0x00);
      0005DE 4B 00            [ 1] 1317 	push	#0x00
      0005E0 CDr03r1E         [ 4] 1318 	call	_i2c_send_byte
      0005E3 84               [ 1] 1319 	pop	a
                                   1320 ;	lib/rtc.c: 53: i2c_send_byte(sec);
      0005E4 7B 01            [ 1] 1321 	ld	a, (0x01, sp)
      0005E6 88               [ 1] 1322 	push	a
      0005E7 CDr03r1E         [ 4] 1323 	call	_i2c_send_byte
      0005EA 84               [ 1] 1324 	pop	a
                                   1325 ;	lib/rtc.c: 54: i2c_send_byte(min);
      0005EB 7B 07            [ 1] 1326 	ld	a, (0x07, sp)
      0005ED 88               [ 1] 1327 	push	a
      0005EE CDr03r1E         [ 4] 1328 	call	_i2c_send_byte
      0005F1 84               [ 1] 1329 	pop	a
                                   1330 ;	lib/rtc.c: 55: i2c_send_byte(hour);
      0005F2 7B 06            [ 1] 1331 	ld	a, (0x06, sp)
      0005F4 88               [ 1] 1332 	push	a
      0005F5 CDr03r1E         [ 4] 1333 	call	_i2c_send_byte
      0005F8 84               [ 1] 1334 	pop	a
                                   1335 ;	lib/rtc.c: 56: i2c_send_byte(day);
      0005F9 7B 05            [ 1] 1336 	ld	a, (0x05, sp)
      0005FB 88               [ 1] 1337 	push	a
      0005FC CDr03r1E         [ 4] 1338 	call	_i2c_send_byte
      0005FF 84               [ 1] 1339 	pop	a
                                   1340 ;	lib/rtc.c: 57: i2c_send_byte(date);
      000600 7B 04            [ 1] 1341 	ld	a, (0x04, sp)
      000602 88               [ 1] 1342 	push	a
      000603 CDr03r1E         [ 4] 1343 	call	_i2c_send_byte
      000606 84               [ 1] 1344 	pop	a
                                   1345 ;	lib/rtc.c: 58: i2c_send_byte(month);
      000607 7B 03            [ 1] 1346 	ld	a, (0x03, sp)
      000609 88               [ 1] 1347 	push	a
      00060A CDr03r1E         [ 4] 1348 	call	_i2c_send_byte
      00060D 84               [ 1] 1349 	pop	a
                                   1350 ;	lib/rtc.c: 59: i2c_send_byte(year);
      00060E 7B 02            [ 1] 1351 	ld	a, (0x02, sp)
      000610 88               [ 1] 1352 	push	a
      000611 CDr03r1E         [ 4] 1353 	call	_i2c_send_byte
      000614 84               [ 1] 1354 	pop	a
                                   1355 ;	lib/rtc.c: 60: i2c_stop();
      000615 CDr01rB7         [ 4] 1356 	call	_i2c_stop
      000618 5B 07            [ 2] 1357 	addw	sp, #7
      00061A 81               [ 4] 1358 	ret
                                   1359 ;	lib/eeprom.c: 3: void EEPROM_UNLOCK(void){
                                   1360 ;	-----------------------------------------
                                   1361 ;	 function EEPROM_UNLOCK
                                   1362 ;	-----------------------------------------
      00061B                       1363 _EEPROM_UNLOCK:
                                   1364 ;	lib/eeprom.c: 5: FLASH_DUKR = 0xAE; // unlock EEPROM
      00061B 35 AE 50 64      [ 1] 1365 	mov	0x5064+0, #0xae
                                   1366 ;	lib/eeprom.c: 6: FLASH_DUKR = 0x56;
      00061F 35 56 50 64      [ 1] 1367 	mov	0x5064+0, #0x56
                                   1368 ;	lib/eeprom.c: 8: while (!(FLASH_IAPSR & (1<<3))); // check protection off
      000623                       1369 00101$:
      000623 AE 50 5F         [ 2] 1370 	ldw	x, #0x505f
      000626 F6               [ 1] 1371 	ld	a, (x)
      000627 A5 08            [ 1] 1372 	bcp	a, #0x08
      000629 27 F8            [ 1] 1373 	jreq	00101$
      00062B 81               [ 4] 1374 	ret
                                   1375 ;	clock.c: 84: void hard_Reset(){ //default setting
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function hard_Reset
                                   1378 ;	-----------------------------------------
      00062C                       1379 _hard_Reset:
      00062C 52 02            [ 2] 1380 	sub	sp, #2
                                   1381 ;	clock.c: 86: EEPROM_UNLOCK();
      00062E CDr06r1B         [ 4] 1382 	call	_EEPROM_UNLOCK
                                   1383 ;	clock.c: 87: EEPROM_DATA(setting_Brigh) = 7;
      000631 35 07 40 00      [ 1] 1384 	mov	0x4000+0, #0x07
                                   1385 ;	clock.c: 89: EEPROM_DATA(DnClock_hour_0) = 0x00;
      000635 35 00 40 00      [ 1] 1386 	mov	0x4000+0, #0x00
                                   1387 ;	clock.c: 90: EEPROM_DATA(DnClock_min_0)	= 0x00;
      000639 35 00 40 01      [ 1] 1388 	mov	0x4001+0, #0x00
                                   1389 ;	clock.c: 92: EEPROM_DATA(DnClock_hour_1) = 0x00;
      00063D 35 00 40 02      [ 1] 1390 	mov	0x4002+0, #0x00
                                   1391 ;	clock.c: 93: EEPROM_DATA(DnClock_min_1)	= 0x00;
      000641 35 00 40 03      [ 1] 1392 	mov	0x4003+0, #0x00
                                   1393 ;	clock.c: 95: EEPROM_DATA(DnClock_hour_2) = 0x00;
      000645 35 00 40 04      [ 1] 1394 	mov	0x4004+0, #0x00
                                   1395 ;	clock.c: 96: EEPROM_DATA(DnClock_min_2)	= 0x00;
      000649 35 00 40 05      [ 1] 1396 	mov	0x4005+0, #0x00
                                   1397 ;	clock.c: 98: EEPROM_DATA(DnClock_hour_3) = 0x00;
      00064D 35 00 40 06      [ 1] 1398 	mov	0x4006+0, #0x00
                                   1399 ;	clock.c: 99: EEPROM_DATA(DnClock_min_3)	= 0x00;		
      000651 35 00 40 07      [ 1] 1400 	mov	0x4007+0, #0x00
                                   1401 ;	clock.c: 102: EEPROM_LOCK();
      000655 AE 50 5F         [ 2] 1402 	ldw	x, #0x505f
      000658 F6               [ 1] 1403 	ld	a, (x)
      000659 A4 F7            [ 1] 1404 	and	a, #0xf7
      00065B F7               [ 1] 1405 	ld	(x), a
                                   1406 ;	clock.c: 104: RTC_Set(0, 0, 0, 1, 1, 1, 20); //reset RTC
      00065C 4B 14            [ 1] 1407 	push	#0x14
      00065E 4B 01            [ 1] 1408 	push	#0x01
      000660 4B 01            [ 1] 1409 	push	#0x01
      000662 4B 01            [ 1] 1410 	push	#0x01
      000664 4B 00            [ 1] 1411 	push	#0x00
      000666 4B 00            [ 1] 1412 	push	#0x00
      000668 4B 00            [ 1] 1413 	push	#0x00
      00066A CDr05r8D         [ 4] 1414 	call	_RTC_Set
      00066D 5B 07            [ 2] 1415 	addw	sp, #7
                                   1416 ;	clock.c: 107: TM1637_cleer();
      00066F CDr01r80         [ 4] 1417 	call	_TM1637_cleer
                                   1418 ;	clock.c: 108: TM1637_sendMASS(0x50,0x6D,0x78,0x00); //RESET
      000672 AEr00r03         [ 2] 1419 	ldw	x, #_TM1637_seg+0
      000675 1F 01            [ 2] 1420 	ldw	(0x01, sp), x
      000677 1E 01            [ 2] 1421 	ldw	x, (0x01, sp)
      000679 A6 50            [ 1] 1422 	ld	a, #0x50
      00067B F7               [ 1] 1423 	ld	(x), a
      00067C 1E 01            [ 2] 1424 	ldw	x, (0x01, sp)
      00067E 5C               [ 2] 1425 	incw	x
      00067F A6 6D            [ 1] 1426 	ld	a, #0x6d
      000681 F7               [ 1] 1427 	ld	(x), a
      000682 1E 01            [ 2] 1428 	ldw	x, (0x01, sp)
      000684 5C               [ 2] 1429 	incw	x
      000685 5C               [ 2] 1430 	incw	x
      000686 A6 78            [ 1] 1431 	ld	a, #0x78
      000688 F7               [ 1] 1432 	ld	(x), a
      000689 1E 01            [ 2] 1433 	ldw	x, (0x01, sp)
      00068B 1C 00 03         [ 2] 1434 	addw	x, #0x0003
      00068E 7F               [ 1] 1435 	clr	(x)
      00068F CDr01r39         [ 4] 1436 	call	_TM1637_send
                                   1437 ;	clock.c: 109: delay(99999);
      000692 4B 9F            [ 1] 1438 	push	#0x9f
      000694 4B 86            [ 1] 1439 	push	#0x86
      000696 4B 01            [ 1] 1440 	push	#0x01
      000698 4B 00            [ 1] 1441 	push	#0x00
      00069A CDr00r00         [ 4] 1442 	call	_delay
      00069D 5B 04            [ 2] 1443 	addw	sp, #4
                                   1444 ;	clock.c: 111: WWDG_CR = 0xFF; //software reset
      00069F 35 FF 50 D1      [ 1] 1445 	mov	0x50d1+0, #0xff
      0006A3 5B 02            [ 2] 1446 	addw	sp, #2
      0006A5 81               [ 4] 1447 	ret
                                   1448 ;	clock.c: 116: char button(char but){ //Обработка кнопок
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function button
                                   1451 ;	-----------------------------------------
      0006A6                       1452 _button:
      0006A6 52 04            [ 2] 1453 	sub	sp, #4
                                   1454 ;	clock.c: 118: if(!(PC_IDR&(1<<but))){
      0006A8 AE 50 0B         [ 2] 1455 	ldw	x, #0x500b
      0006AB F6               [ 1] 1456 	ld	a, (x)
      0006AC 95               [ 1] 1457 	ld	xh, a
      0006AD 90 AE 00 01      [ 2] 1458 	ldw	y, #0x0001
      0006B1 17 01            [ 2] 1459 	ldw	(0x01, sp), y
      0006B3 7B 07            [ 1] 1460 	ld	a, (0x07, sp)
      0006B5 27 07            [ 1] 1461 	jreq	00117$
      0006B7                       1462 00116$:
      0006B7 08 02            [ 1] 1463 	sll	(0x02, sp)
      0006B9 09 01            [ 1] 1464 	rlc	(0x01, sp)
      0006BB 4A               [ 1] 1465 	dec	a
      0006BC 26 F9            [ 1] 1466 	jrne	00116$
      0006BE                       1467 00117$:
      0006BE 4F               [ 1] 1468 	clr	a
      0006BF 97               [ 1] 1469 	ld	xl, a
                                   1470 ;	clock.c: 120: But_Buff &= ~(1 << but);
      0006C0 A6 01            [ 1] 1471 	ld	a, #0x01
      0006C2 90 97            [ 1] 1472 	ld	yl, a
      0006C4 7B 07            [ 1] 1473 	ld	a, (0x07, sp)
      0006C6 27 06            [ 1] 1474 	jreq	00119$
      0006C8                       1475 00118$:
      0006C8 61               [ 1] 1476 	exg	a, yl
      0006C9 48               [ 1] 1477 	sll	a
      0006CA 61               [ 1] 1478 	exg	a, yl
      0006CB 4A               [ 1] 1479 	dec	a
      0006CC 26 FA            [ 1] 1480 	jrne	00118$
      0006CE                       1481 00119$:
                                   1482 ;	clock.c: 118: if(!(PC_IDR&(1<<but))){
      0006CE 9E               [ 1] 1483 	ld	a, xh
      0006CF 14 02            [ 1] 1484 	and	a, (0x02, sp)
      0006D1 6B 04            [ 1] 1485 	ld	(0x04, sp), a
      0006D3 9F               [ 1] 1486 	ld	a, xl
      0006D4 14 01            [ 1] 1487 	and	a, (0x01, sp)
      0006D6 6B 03            [ 1] 1488 	ld	(0x03, sp), a
      0006D8 1E 03            [ 2] 1489 	ldw	x, (0x03, sp)
      0006DA 26 1B            [ 1] 1490 	jrne	00104$
                                   1491 ;	clock.c: 119: if(But_Buff&(1 << but)){
      0006DC C6u00u15         [ 1] 1492 	ld	a, _But_Buff+0
      0006DF 95               [ 1] 1493 	ld	xh, a
      0006E0 4F               [ 1] 1494 	clr	a
      0006E1 14 01            [ 1] 1495 	and	a, (0x01, sp)
      0006E3 02               [ 1] 1496 	rlwa	x
      0006E4 14 02            [ 1] 1497 	and	a, (0x02, sp)
      0006E6 95               [ 1] 1498 	ld	xh, a
      0006E7 5D               [ 2] 1499 	tnzw	x
      0006E8 27 15            [ 1] 1500 	jreq	00105$
                                   1501 ;	clock.c: 120: But_Buff &= ~(1 << but);
      0006EA 90 9F            [ 1] 1502 	ld	a, yl
      0006EC 43               [ 1] 1503 	cpl	a
      0006ED C4u00u15         [ 1] 1504 	and	a, _But_Buff+0
      0006F0 C7u00u15         [ 1] 1505 	ld	_But_Buff+0, a
                                   1506 ;	clock.c: 121: return but;
      0006F3 7B 07            [ 1] 1507 	ld	a, (0x07, sp)
      0006F5 20 09            [ 2] 1508 	jra	00106$
      0006F7                       1509 00104$:
                                   1510 ;	clock.c: 124: else But_Buff |= (1 << but);
      0006F7 90 9F            [ 1] 1511 	ld	a, yl
      0006F9 CAu00u15         [ 1] 1512 	or	a, _But_Buff+0
      0006FC C7u00u15         [ 1] 1513 	ld	_But_Buff+0, a
      0006FF                       1514 00105$:
                                   1515 ;	clock.c: 127: return 0;
      0006FF 4F               [ 1] 1516 	clr	a
      000700                       1517 00106$:
      000700 5B 04            [ 2] 1518 	addw	sp, #4
      000702 81               [ 4] 1519 	ret
                                   1520 ;	clock.c: 132: char Set_time(unsigned char hourset, unsigned char minset){
                                   1521 ;	-----------------------------------------
                                   1522 ;	 function Set_time
                                   1523 ;	-----------------------------------------
      000703                       1524 _Set_time:
      000703 52 0C            [ 2] 1525 	sub	sp, #12
                                   1526 ;	clock.c: 134: TM1637_cleer();
      000705 CDr01r80         [ 4] 1527 	call	_TM1637_cleer
                                   1528 ;	clock.c: 136: Soft_Timer = 0x00;
      000708 5F               [ 1] 1529 	clrw	x
      000709 CFu00u11         [ 2] 1530 	ldw	_Soft_Timer+0, x
                                   1531 ;	clock.c: 139: while(1){
      00070C AEr00r07         [ 2] 1532 	ldw	x, #_ASCI+0
      00070F 1F 03            [ 2] 1533 	ldw	(0x03, sp), x
      000711 AEr00r03         [ 2] 1534 	ldw	x, #_TM1637_seg+0
      000714 1F 05            [ 2] 1535 	ldw	(0x05, sp), x
      000716 0F 01            [ 1] 1536 	clr	(0x01, sp)
      000718                       1537 00140$:
                                   1538 ;	clock.c: 141: if(button(up)){
      000718 4B 05            [ 1] 1539 	push	#0x05
      00071A CDr06rA6         [ 4] 1540 	call	_button
      00071D 5B 01            [ 2] 1541 	addw	sp, #1
      00071F 95               [ 1] 1542 	ld	xh, a
                                   1543 ;	clock.c: 146: if(Point == 1){
      000720 7B 01            [ 1] 1544 	ld	a, (0x01, sp)
      000722 A1 01            [ 1] 1545 	cp	a, #0x01
      000724 26 06            [ 1] 1546 	jrne	00226$
      000726 A6 01            [ 1] 1547 	ld	a, #0x01
      000728 6B 02            [ 1] 1548 	ld	(0x02, sp), a
      00072A 20 02            [ 2] 1549 	jra	00227$
      00072C                       1550 00226$:
      00072C 0F 02            [ 1] 1551 	clr	(0x02, sp)
      00072E                       1552 00227$:
                                   1553 ;	clock.c: 141: if(button(up)){
      00072E 9E               [ 1] 1554 	ld	a, xh
      00072F 4D               [ 1] 1555 	tnz	a
      000730 27 1C            [ 1] 1556 	jreq	00110$
                                   1557 ;	clock.c: 142: if(Point == 0){
      000732 0D 01            [ 1] 1558 	tnz	(0x01, sp)
      000734 26 0A            [ 1] 1559 	jrne	00104$
                                   1560 ;	clock.c: 143: hourset++;
      000736 0C 0F            [ 1] 1561 	inc	(0x0f, sp)
                                   1562 ;	clock.c: 144: if(hourset > 23)hourset = 0;
      000738 7B 0F            [ 1] 1563 	ld	a, (0x0f, sp)
      00073A A1 17            [ 1] 1564 	cp	a, #0x17
      00073C 23 02            [ 2] 1565 	jrule	00104$
      00073E 0F 0F            [ 1] 1566 	clr	(0x0f, sp)
      000740                       1567 00104$:
                                   1568 ;	clock.c: 146: if(Point == 1){
      000740 0D 02            [ 1] 1569 	tnz	(0x02, sp)
      000742 27 0A            [ 1] 1570 	jreq	00110$
                                   1571 ;	clock.c: 147: minset++;
      000744 0C 10            [ 1] 1572 	inc	(0x10, sp)
                                   1573 ;	clock.c: 148: if(minset > 59)minset = 0;
      000746 7B 10            [ 1] 1574 	ld	a, (0x10, sp)
      000748 A1 3B            [ 1] 1575 	cp	a, #0x3b
      00074A 23 02            [ 2] 1576 	jrule	00110$
      00074C 0F 10            [ 1] 1577 	clr	(0x10, sp)
      00074E                       1578 00110$:
                                   1579 ;	clock.c: 151: if(button(dn)){
      00074E 4B 07            [ 1] 1580 	push	#0x07
      000750 CDr06rA6         [ 4] 1581 	call	_button
      000753 5B 01            [ 2] 1582 	addw	sp, #1
      000755 4D               [ 1] 1583 	tnz	a
      000756 27 20            [ 1] 1584 	jreq	00120$
                                   1585 ;	clock.c: 152: if(Point == 0){
      000758 0D 01            [ 1] 1586 	tnz	(0x01, sp)
      00075A 26 0C            [ 1] 1587 	jrne	00114$
                                   1588 ;	clock.c: 153: hourset--;
      00075C 0A 0F            [ 1] 1589 	dec	(0x0f, sp)
                                   1590 ;	clock.c: 154: if(hourset > 23)hourset = 23;
      00075E 7B 0F            [ 1] 1591 	ld	a, (0x0f, sp)
      000760 A1 17            [ 1] 1592 	cp	a, #0x17
      000762 23 04            [ 2] 1593 	jrule	00114$
      000764 A6 17            [ 1] 1594 	ld	a, #0x17
      000766 6B 0F            [ 1] 1595 	ld	(0x0f, sp), a
      000768                       1596 00114$:
                                   1597 ;	clock.c: 156: if(Point == 1){
      000768 0D 02            [ 1] 1598 	tnz	(0x02, sp)
      00076A 27 0C            [ 1] 1599 	jreq	00120$
                                   1600 ;	clock.c: 157: minset--;
      00076C 0A 10            [ 1] 1601 	dec	(0x10, sp)
                                   1602 ;	clock.c: 158: if(minset > 59)minset = 59;
      00076E 7B 10            [ 1] 1603 	ld	a, (0x10, sp)
      000770 A1 3B            [ 1] 1604 	cp	a, #0x3b
      000772 23 04            [ 2] 1605 	jrule	00120$
      000774 A6 3B            [ 1] 1606 	ld	a, #0x3b
      000776 6B 10            [ 1] 1607 	ld	(0x10, sp), a
      000778                       1608 00120$:
                                   1609 ;	clock.c: 161: if(button(ok)){
      000778 4B 06            [ 1] 1610 	push	#0x06
      00077A CDr06rA6         [ 4] 1611 	call	_button
      00077D 5B 01            [ 2] 1612 	addw	sp, #1
      00077F 4D               [ 1] 1613 	tnz	a
      000780 27 02            [ 1] 1614 	jreq	00122$
                                   1615 ;	clock.c: 162: Point++;
      000782 0C 01            [ 1] 1616 	inc	(0x01, sp)
      000784                       1617 00122$:
                                   1618 ;	clock.c: 166: Soft_Timer++; //мигание
      000784 CEu00u11         [ 2] 1619 	ldw	x, _Soft_Timer+0
      000787 5C               [ 2] 1620 	incw	x
                                   1621 ;	clock.c: 167: if(Soft_Timer == 10){			
      000788 CFu00u11         [ 2] 1622 	ldw	_Soft_Timer+0, x
      00078B A3 00 0A         [ 2] 1623 	cpw	x, #0x000a
      00078E 26 0E            [ 1] 1624 	jrne	00124$
                                   1625 ;	clock.c: 168: dot = !dot;
      000790 C6u00u07         [ 1] 1626 	ld	a, _dot+0
      000793 A0 01            [ 1] 1627 	sub	a, #0x01
      000795 4F               [ 1] 1628 	clr	a
      000796 49               [ 1] 1629 	rlc	a
      000797 C7u00u07         [ 1] 1630 	ld	_dot+0, a
                                   1631 ;	clock.c: 169: Soft_Timer = 0;
      00079A 5F               [ 1] 1632 	clrw	x
      00079B CFu00u11         [ 2] 1633 	ldw	_Soft_Timer+0, x
      00079E                       1634 00124$:
                                   1635 ;	clock.c: 173: if(Point<2){ 
      00079E 7B 01            [ 1] 1636 	ld	a, (0x01, sp)
      0007A0 A1 02            [ 1] 1637 	cp	a, #0x02
      0007A2 2F 03            [ 1] 1638 	jrslt	00242$
      0007A4 CCr08r31         [ 2] 1639 	jp	00136$
      0007A7                       1640 00242$:
                                   1641 ;	clock.c: 176: TM1637_seg[1] = 0x00;					
      0007A7 1E 05            [ 2] 1642 	ldw	x, (0x05, sp)
      0007A9 5C               [ 2] 1643 	incw	x
      0007AA 1F 07            [ 2] 1644 	ldw	(0x07, sp), x
                                   1645 ;	clock.c: 174: if(Point == 0 && dot == 1){
      0007AC 0D 01            [ 1] 1646 	tnz	(0x01, sp)
      0007AE 26 0F            [ 1] 1647 	jrne	00128$
      0007B0 C6u00u07         [ 1] 1648 	ld	a, _dot+0
      0007B3 A1 01            [ 1] 1649 	cp	a, #0x01
      0007B5 26 08            [ 1] 1650 	jrne	00128$
                                   1651 ;	clock.c: 175: TM1637_seg[0] = 0x00;
      0007B7 1E 05            [ 2] 1652 	ldw	x, (0x05, sp)
      0007B9 7F               [ 1] 1653 	clr	(x)
                                   1654 ;	clock.c: 176: TM1637_seg[1] = 0x00;					
      0007BA 1E 07            [ 2] 1655 	ldw	x, (0x07, sp)
      0007BC 7F               [ 1] 1656 	clr	(x)
      0007BD 20 28            [ 2] 1657 	jra	00129$
      0007BF                       1658 00128$:
                                   1659 ;	clock.c: 179: if(hourset/10)TM1637_seg[0] = ASCI[hourset/10];
      0007BF 5F               [ 1] 1660 	clrw	x
      0007C0 7B 0F            [ 1] 1661 	ld	a, (0x0f, sp)
      0007C2 97               [ 1] 1662 	ld	xl, a
      0007C3 A6 0A            [ 1] 1663 	ld	a, #0x0a
      0007C5 62               [ 2] 1664 	div	x, a
      0007C6 9F               [ 1] 1665 	ld	a, xl
      0007C7 4D               [ 1] 1666 	tnz	a
      0007C8 27 0D            [ 1] 1667 	jreq	00126$
      0007CA 4F               [ 1] 1668 	clr	a
      0007CB 95               [ 1] 1669 	ld	xh, a
      0007CC 72 FB 03         [ 2] 1670 	addw	x, (0x03, sp)
      0007CF 1F 09            [ 2] 1671 	ldw	(0x09, sp), x
      0007D1 1E 09            [ 2] 1672 	ldw	x, (0x09, sp)
      0007D3 F6               [ 1] 1673 	ld	a, (x)
      0007D4 1E 05            [ 2] 1674 	ldw	x, (0x05, sp)
      0007D6 F7               [ 1] 1675 	ld	(x), a
      0007D7                       1676 00126$:
                                   1677 ;	clock.c: 180: TM1637_seg[1] = ASCI[hourset%10];		
      0007D7 5F               [ 1] 1678 	clrw	x
      0007D8 7B 0F            [ 1] 1679 	ld	a, (0x0f, sp)
      0007DA 97               [ 1] 1680 	ld	xl, a
      0007DB A6 0A            [ 1] 1681 	ld	a, #0x0a
      0007DD 62               [ 2] 1682 	div	x, a
      0007DE 5F               [ 1] 1683 	clrw	x
      0007DF 97               [ 1] 1684 	ld	xl, a
      0007E0 72 FB 03         [ 2] 1685 	addw	x, (0x03, sp)
      0007E3 F6               [ 1] 1686 	ld	a, (x)
      0007E4 1E 07            [ 2] 1687 	ldw	x, (0x07, sp)
      0007E6 F7               [ 1] 1688 	ld	(x), a
      0007E7                       1689 00129$:
                                   1690 ;	clock.c: 183: TM1637_seg[1] = TM1637_seg[1] +0x80;
      0007E7 1E 07            [ 2] 1691 	ldw	x, (0x07, sp)
      0007E9 F6               [ 1] 1692 	ld	a, (x)
      0007EA AB 80            [ 1] 1693 	add	a, #0x80
      0007EC 1E 07            [ 2] 1694 	ldw	x, (0x07, sp)
      0007EE F7               [ 1] 1695 	ld	(x), a
                                   1696 ;	clock.c: 186: TM1637_seg[2] = 0x00;
      0007EF 1E 05            [ 2] 1697 	ldw	x, (0x05, sp)
      0007F1 5C               [ 2] 1698 	incw	x
      0007F2 5C               [ 2] 1699 	incw	x
      0007F3 1F 0B            [ 2] 1700 	ldw	(0x0b, sp), x
                                   1701 ;	clock.c: 187: TM1637_seg[3] = 0x00;					
      0007F5 16 05            [ 2] 1702 	ldw	y, (0x05, sp)
      0007F7 72 A9 00 03      [ 2] 1703 	addw	y, #0x0003
                                   1704 ;	clock.c: 185: if(Point == 1 && dot == 1){
      0007FB 7B 01            [ 1] 1705 	ld	a, (0x01, sp)
      0007FD A1 01            [ 1] 1706 	cp	a, #0x01
      0007FF 26 0E            [ 1] 1707 	jrne	00132$
      000801 C6u00u07         [ 1] 1708 	ld	a, _dot+0
      000804 A1 01            [ 1] 1709 	cp	a, #0x01
      000806 26 07            [ 1] 1710 	jrne	00132$
                                   1711 ;	clock.c: 186: TM1637_seg[2] = 0x00;
      000808 1E 0B            [ 2] 1712 	ldw	x, (0x0b, sp)
      00080A 7F               [ 1] 1713 	clr	(x)
                                   1714 ;	clock.c: 187: TM1637_seg[3] = 0x00;					
      00080B 90 7F            [ 1] 1715 	clr	(y)
      00080D 20 1F            [ 2] 1716 	jra	00133$
      00080F                       1717 00132$:
                                   1718 ;	clock.c: 190: TM1637_seg[2] = ASCI[minset/10];
      00080F 5F               [ 1] 1719 	clrw	x
      000810 7B 10            [ 1] 1720 	ld	a, (0x10, sp)
      000812 97               [ 1] 1721 	ld	xl, a
      000813 A6 0A            [ 1] 1722 	ld	a, #0x0a
      000815 62               [ 2] 1723 	div	x, a
      000816 4F               [ 1] 1724 	clr	a
      000817 95               [ 1] 1725 	ld	xh, a
      000818 72 FB 03         [ 2] 1726 	addw	x, (0x03, sp)
      00081B F6               [ 1] 1727 	ld	a, (x)
      00081C 1E 0B            [ 2] 1728 	ldw	x, (0x0b, sp)
      00081E F7               [ 1] 1729 	ld	(x), a
                                   1730 ;	clock.c: 191: TM1637_seg[3] = ASCI[minset%10];		
      00081F 5F               [ 1] 1731 	clrw	x
      000820 7B 10            [ 1] 1732 	ld	a, (0x10, sp)
      000822 97               [ 1] 1733 	ld	xl, a
      000823 A6 0A            [ 1] 1734 	ld	a, #0x0a
      000825 62               [ 2] 1735 	div	x, a
      000826 5F               [ 1] 1736 	clrw	x
      000827 97               [ 1] 1737 	ld	xl, a
      000828 72 FB 03         [ 2] 1738 	addw	x, (0x03, sp)
      00082B F6               [ 1] 1739 	ld	a, (x)
      00082C 90 F7            [ 1] 1740 	ld	(y), a
      00082E                       1741 00133$:
                                   1742 ;	clock.c: 193: TM1637_send();				
      00082E CDr01r39         [ 4] 1743 	call	_TM1637_send
      000831                       1744 00136$:
                                   1745 ;	clock.c: 196: if(Point == 2){
      000831 7B 01            [ 1] 1746 	ld	a, (0x01, sp)
      000833 A1 02            [ 1] 1747 	cp	a, #0x02
      000835 27 03            [ 1] 1748 	jreq	00256$
      000837 CCr07r18         [ 2] 1749 	jp	00140$
      00083A                       1750 00256$:
                                   1751 ;	clock.c: 197: Clock_Temp[0] = hourset;
      00083A AEr00r08         [ 2] 1752 	ldw	x, #_Clock_Temp+0
      00083D 7B 0F            [ 1] 1753 	ld	a, (0x0f, sp)
      00083F F7               [ 1] 1754 	ld	(x), a
                                   1755 ;	clock.c: 198: Clock_Temp[1] = minset;
      000840 5C               [ 2] 1756 	incw	x
      000841 7B 10            [ 1] 1757 	ld	a, (0x10, sp)
      000843 F7               [ 1] 1758 	ld	(x), a
                                   1759 ;	clock.c: 199: Soft_Timer = 0x00;
      000844 5F               [ 1] 1760 	clrw	x
      000845 CFu00u11         [ 2] 1761 	ldw	_Soft_Timer+0, x
                                   1762 ;	clock.c: 200: return 1;
      000848 A6 01            [ 1] 1763 	ld	a, #0x01
      00084A 5B 0C            [ 2] 1764 	addw	sp, #12
      00084C 81               [ 4] 1765 	ret
                                   1766 ;	clock.c: 211: char Set_Brigh(){
                                   1767 ;	-----------------------------------------
                                   1768 ;	 function Set_Brigh
                                   1769 ;	-----------------------------------------
      00084D                       1770 _Set_Brigh:
      00084D 52 04            [ 2] 1771 	sub	sp, #4
                                   1772 ;	clock.c: 212: TM1637_cleer();
      00084F CDr01r80         [ 4] 1773 	call	_TM1637_cleer
                                   1774 ;	clock.c: 213: Soft_Timer = 0x00;
      000852 5F               [ 1] 1775 	clrw	x
      000853 CFu00u11         [ 2] 1776 	ldw	_Soft_Timer+0, x
                                   1777 ;	clock.c: 214: Point_Meny = EEPROM_DATA(setting_Brigh);
      000856 AE 40 00         [ 2] 1778 	ldw	x, #0x4000
      000859 F6               [ 1] 1779 	ld	a, (x)
      00085A 97               [ 1] 1780 	ld	xl, a
      00085B 49               [ 1] 1781 	rlc	a
      00085C 4F               [ 1] 1782 	clr	a
      00085D A2 00            [ 1] 1783 	sbc	a, #0x00
      00085F 95               [ 1] 1784 	ld	xh, a
      000860 CFu00u13         [ 2] 1785 	ldw	_Point_Meny+0, x
                                   1786 ;	clock.c: 216: auto_exit = 0;
      000863 72 5Fu00u16      [ 1] 1787 	clr	_auto_exit+0
                                   1788 ;	clock.c: 218: while(1){
      000867 AEr00r07         [ 2] 1789 	ldw	x, #_ASCI+0
      00086A 1F 03            [ 2] 1790 	ldw	(0x03, sp), x
      00086C                       1791 00116$:
                                   1792 ;	clock.c: 220: if(button(up)){
      00086C 4B 05            [ 1] 1793 	push	#0x05
      00086E CDr06rA6         [ 4] 1794 	call	_button
      000871 5B 01            [ 2] 1795 	addw	sp, #1
      000873 4D               [ 1] 1796 	tnz	a
      000874 27 19            [ 1] 1797 	jreq	00104$
                                   1798 ;	clock.c: 221: Point_Meny++;
      000876 CEu00u13         [ 2] 1799 	ldw	x, _Point_Meny+0
      000879 5C               [ 2] 1800 	incw	x
      00087A CFu00u13         [ 2] 1801 	ldw	_Point_Meny+0, x
                                   1802 ;	clock.c: 222: auto_exit = 0;
      00087D 72 5Fu00u16      [ 1] 1803 	clr	_auto_exit+0
                                   1804 ;	clock.c: 223: if(Point_Meny > 7)Point_Meny = 7;
      000881 CEu00u13         [ 2] 1805 	ldw	x, _Point_Meny+0
      000884 A3 00 07         [ 2] 1806 	cpw	x, #0x0007
      000887 23 06            [ 2] 1807 	jrule	00104$
      000889 AE 00 07         [ 2] 1808 	ldw	x, #0x0007
      00088C CFu00u13         [ 2] 1809 	ldw	_Point_Meny+0, x
      00088F                       1810 00104$:
                                   1811 ;	clock.c: 226: if(button(dn)){
      00088F 4B 07            [ 1] 1812 	push	#0x07
      000891 CDr06rA6         [ 4] 1813 	call	_button
      000894 5B 01            [ 2] 1814 	addw	sp, #1
      000896 4D               [ 1] 1815 	tnz	a
      000897 27 17            [ 1] 1816 	jreq	00108$
                                   1817 ;	clock.c: 227: Point_Meny--;
      000899 CEu00u13         [ 2] 1818 	ldw	x, _Point_Meny+0
      00089C 5A               [ 2] 1819 	decw	x
      00089D CFu00u13         [ 2] 1820 	ldw	_Point_Meny+0, x
                                   1821 ;	clock.c: 228: auto_exit = 0;
      0008A0 72 5Fu00u16      [ 1] 1822 	clr	_auto_exit+0
                                   1823 ;	clock.c: 229: if(Point_Meny > 7)Point_Meny = 0;
      0008A4 CEu00u13         [ 2] 1824 	ldw	x, _Point_Meny+0
      0008A7 A3 00 07         [ 2] 1825 	cpw	x, #0x0007
      0008AA 23 04            [ 2] 1826 	jrule	00108$
      0008AC 5F               [ 1] 1827 	clrw	x
      0008AD CFu00u13         [ 2] 1828 	ldw	_Point_Meny+0, x
      0008B0                       1829 00108$:
                                   1830 ;	clock.c: 231: if(button(ok)){
      0008B0 4B 06            [ 1] 1831 	push	#0x06
      0008B2 CDr06rA6         [ 4] 1832 	call	_button
      0008B5 5B 01            [ 2] 1833 	addw	sp, #1
      0008B7 4D               [ 1] 1834 	tnz	a
      0008B8 27 1A            [ 1] 1835 	jreq	00110$
                                   1836 ;	clock.c: 232: auto_exit = 0;
      0008BA 72 5Fu00u16      [ 1] 1837 	clr	_auto_exit+0
                                   1838 ;	clock.c: 234: EEPROM_UNLOCK();
      0008BE CDr06r1B         [ 4] 1839 	call	_EEPROM_UNLOCK
                                   1840 ;	clock.c: 235: EEPROM_DATA(setting_Brigh) = Point_Meny;
      0008C1 C6u00u14         [ 1] 1841 	ld	a, _Point_Meny+1
      0008C4 AE 40 00         [ 2] 1842 	ldw	x, #0x4000
      0008C7 F7               [ 1] 1843 	ld	(x), a
                                   1844 ;	clock.c: 236: EEPROM_LOCK();
      0008C8 AE 50 5F         [ 2] 1845 	ldw	x, #0x505f
      0008CB F6               [ 1] 1846 	ld	a, (x)
      0008CC A4 F7            [ 1] 1847 	and	a, #0xf7
      0008CE F7               [ 1] 1848 	ld	(x), a
                                   1849 ;	clock.c: 238: return Point_Meny;
      0008CF C6u00u14         [ 1] 1850 	ld	a, _Point_Meny+1
      0008D2 20 5F            [ 2] 1851 	jra	00118$
      0008D4                       1852 00110$:
                                   1853 ;	clock.c: 242: Soft_Timer++;
      0008D4 CEu00u11         [ 2] 1854 	ldw	x, _Soft_Timer+0
      0008D7 5C               [ 2] 1855 	incw	x
                                   1856 ;	clock.c: 243: if(Soft_Timer == 300){
      0008D8 CFu00u11         [ 2] 1857 	ldw	_Soft_Timer+0, x
      0008DB A3 01 2C         [ 2] 1858 	cpw	x, #0x012c
      0008DE 26 3A            [ 1] 1859 	jrne	00112$
                                   1860 ;	clock.c: 244: TM1637_sendMASS(0x7C,0x50,0x00,ASCI[Point_Meny]);
      0008E0 AEr00r03         [ 2] 1861 	ldw	x, #_TM1637_seg+0
      0008E3 1F 01            [ 2] 1862 	ldw	(0x01, sp), x
      0008E5 1E 01            [ 2] 1863 	ldw	x, (0x01, sp)
      0008E7 A6 7C            [ 1] 1864 	ld	a, #0x7c
      0008E9 F7               [ 1] 1865 	ld	(x), a
      0008EA 1E 01            [ 2] 1866 	ldw	x, (0x01, sp)
      0008EC 5C               [ 2] 1867 	incw	x
      0008ED A6 50            [ 1] 1868 	ld	a, #0x50
      0008EF F7               [ 1] 1869 	ld	(x), a
      0008F0 1E 01            [ 2] 1870 	ldw	x, (0x01, sp)
      0008F2 5C               [ 2] 1871 	incw	x
      0008F3 5C               [ 2] 1872 	incw	x
      0008F4 7F               [ 1] 1873 	clr	(x)
      0008F5 16 01            [ 2] 1874 	ldw	y, (0x01, sp)
      0008F7 72 A9 00 03      [ 2] 1875 	addw	y, #0x0003
      0008FB 1E 03            [ 2] 1876 	ldw	x, (0x03, sp)
      0008FD 72 BBu00u13      [ 2] 1877 	addw	x, _Point_Meny+0
      000901 F6               [ 1] 1878 	ld	a, (x)
      000902 90 F7            [ 1] 1879 	ld	(y), a
      000904 CDr01r39         [ 4] 1880 	call	_TM1637_send
                                   1881 ;	clock.c: 245: TM1637_brigh(Point_Meny);
      000907 C6u00u14         [ 1] 1882 	ld	a, _Point_Meny+1
      00090A 88               [ 1] 1883 	push	a
      00090B CDr01r20         [ 4] 1884 	call	_TM1637_brigh
      00090E 84               [ 1] 1885 	pop	a
                                   1886 ;	clock.c: 246: Soft_Timer = 0x00;
      00090F 5F               [ 1] 1887 	clrw	x
      000910 CFu00u11         [ 2] 1888 	ldw	_Soft_Timer+0, x
                                   1889 ;	clock.c: 247: auto_exit++;
      000913 C6u00u16         [ 1] 1890 	ld	a, _auto_exit+0
      000916 4C               [ 1] 1891 	inc	a
      000917 C7u00u16         [ 1] 1892 	ld	_auto_exit+0, a
      00091A                       1893 00112$:
                                   1894 ;	clock.c: 251: if(auto_exit == 20){
      00091A C6u00u16         [ 1] 1895 	ld	a, _auto_exit+0
      00091D A1 14            [ 1] 1896 	cp	a, #0x14
      00091F 27 03            [ 1] 1897 	jreq	00162$
      000921 CCr08r6C         [ 2] 1898 	jp	00116$
      000924                       1899 00162$:
                                   1900 ;	clock.c: 253: TM1637_brigh(EEPROM_DATA(setting_Brigh));
      000924 AE 40 00         [ 2] 1901 	ldw	x, #0x4000
      000927 F6               [ 1] 1902 	ld	a, (x)
      000928 88               [ 1] 1903 	push	a
      000929 CDr01r20         [ 4] 1904 	call	_TM1637_brigh
      00092C 84               [ 1] 1905 	pop	a
                                   1906 ;	clock.c: 254: clock();
      00092D CDr0Cr47         [ 4] 1907 	call	_clock
      000930 CCr08r6C         [ 2] 1908 	jp	00116$
      000933                       1909 00118$:
      000933 5B 04            [ 2] 1910 	addw	sp, #4
      000935 81               [ 4] 1911 	ret
                                   1912 ;	clock.c: 262: void Set_DnTimer(){ //"r__1"
                                   1913 ;	-----------------------------------------
                                   1914 ;	 function Set_DnTimer
                                   1915 ;	-----------------------------------------
      000936                       1916 _Set_DnTimer:
      000936 52 02            [ 2] 1917 	sub	sp, #2
                                   1918 ;	clock.c: 263: TM1637_cleer();
      000938 CDr01r80         [ 4] 1919 	call	_TM1637_cleer
                                   1920 ;	clock.c: 264: Point_Meny = 0;
      00093B 5F               [ 1] 1921 	clrw	x
      00093C CFu00u13         [ 2] 1922 	ldw	_Point_Meny+0, x
                                   1923 ;	clock.c: 265: Soft_Timer = 0x00;
      00093F 5F               [ 1] 1924 	clrw	x
      000940 CFu00u11         [ 2] 1925 	ldw	_Soft_Timer+0, x
                                   1926 ;	clock.c: 267: while(1){
      000943                       1927 00124$:
                                   1928 ;	clock.c: 268: if(button(up)){
      000943 4B 05            [ 1] 1929 	push	#0x05
      000945 CDr06rA6         [ 4] 1930 	call	_button
      000948 5B 01            [ 2] 1931 	addw	sp, #1
      00094A 4D               [ 1] 1932 	tnz	a
      00094B 27 10            [ 1] 1933 	jreq	00104$
                                   1934 ;	clock.c: 269: Point_Meny++;
      00094D CEu00u13         [ 2] 1935 	ldw	x, _Point_Meny+0
      000950 5C               [ 2] 1936 	incw	x
                                   1937 ;	clock.c: 270: if(Point_Meny > 4)Point_Meny = 0;
      000951 CFu00u13         [ 2] 1938 	ldw	_Point_Meny+0, x
      000954 A3 00 04         [ 2] 1939 	cpw	x, #0x0004
      000957 23 04            [ 2] 1940 	jrule	00104$
      000959 5F               [ 1] 1941 	clrw	x
      00095A CFu00u13         [ 2] 1942 	ldw	_Point_Meny+0, x
      00095D                       1943 00104$:
                                   1944 ;	clock.c: 273: if(button(dn)){
      00095D 4B 07            [ 1] 1945 	push	#0x07
      00095F CDr06rA6         [ 4] 1946 	call	_button
      000962 5B 01            [ 2] 1947 	addw	sp, #1
      000964 4D               [ 1] 1948 	tnz	a
      000965 27 12            [ 1] 1949 	jreq	00108$
                                   1950 ;	clock.c: 274: Point_Meny--;
      000967 CEu00u13         [ 2] 1951 	ldw	x, _Point_Meny+0
      00096A 5A               [ 2] 1952 	decw	x
                                   1953 ;	clock.c: 275: if(Point_Meny > 4)Point_Meny = 4;
      00096B CFu00u13         [ 2] 1954 	ldw	_Point_Meny+0, x
      00096E A3 00 04         [ 2] 1955 	cpw	x, #0x0004
      000971 23 06            [ 2] 1956 	jrule	00108$
      000973 AE 00 04         [ 2] 1957 	ldw	x, #0x0004
      000976 CFu00u13         [ 2] 1958 	ldw	_Point_Meny+0, x
      000979                       1959 00108$:
                                   1960 ;	clock.c: 278: if(button(ok)){
      000979 4B 06            [ 1] 1961 	push	#0x06
      00097B CDr06rA6         [ 4] 1962 	call	_button
      00097E 5B 01            [ 2] 1963 	addw	sp, #1
      000980 4D               [ 1] 1964 	tnz	a
      000981 26 03            [ 1] 1965 	jrne	00180$
      000983 CCr0Ar6C         [ 2] 1966 	jp	00120$
      000986                       1967 00180$:
                                   1968 ;	clock.c: 279: if(Point_Meny == 0){
      000986 CEu00u13         [ 2] 1969 	ldw	x, _Point_Meny+0
      000989 26 2E            [ 1] 1970 	jrne	00110$
                                   1971 ;	clock.c: 280: Set_time(EEPROM_DATA(DnClock_hour_0),EEPROM_DATA(DnClock_min_0));
      00098B AE 40 01         [ 2] 1972 	ldw	x, #0x4001
      00098E F6               [ 1] 1973 	ld	a, (x)
      00098F AE 40 00         [ 2] 1974 	ldw	x, #0x4000
      000992 88               [ 1] 1975 	push	a
      000993 F6               [ 1] 1976 	ld	a, (x)
      000994 95               [ 1] 1977 	ld	xh, a
      000995 88               [ 1] 1978 	push	a
      000996 CDr07r03         [ 4] 1979 	call	_Set_time
      000999 5B 02            [ 2] 1980 	addw	sp, #2
                                   1981 ;	clock.c: 281: EEPROM_UNLOCK();
      00099B CDr06r1B         [ 4] 1982 	call	_EEPROM_UNLOCK
                                   1983 ;	clock.c: 282: EEPROM_DATA(DnClock_hour_0) = Clock_Temp[0];
      00099E AEr00r08         [ 2] 1984 	ldw	x, #_Clock_Temp+0
      0009A1 F6               [ 1] 1985 	ld	a, (x)
      0009A2 90 AE 40 00      [ 2] 1986 	ldw	y, #0x4000
      0009A6 90 F7            [ 1] 1987 	ld	(y), a
                                   1988 ;	clock.c: 283: EEPROM_DATA(DnClock_min_0)	= Clock_Temp[1];
      0009A8 E6 01            [ 1] 1989 	ld	a, (0x1, x)
      0009AA AE 40 01         [ 2] 1990 	ldw	x, #0x4001
      0009AD F7               [ 1] 1991 	ld	(x), a
                                   1992 ;	clock.c: 284: EEPROM_LOCK();
      0009AE AE 50 5F         [ 2] 1993 	ldw	x, #0x505f
      0009B1 F6               [ 1] 1994 	ld	a, (x)
      0009B2 A4 F7            [ 1] 1995 	and	a, #0xf7
      0009B4 F7               [ 1] 1996 	ld	(x), a
                                   1997 ;	clock.c: 285: Point_Meny = 0;
      0009B5 5F               [ 1] 1998 	clrw	x
      0009B6 CFu00u13         [ 2] 1999 	ldw	_Point_Meny+0, x
      0009B9                       2000 00110$:
                                   2001 ;	clock.c: 288: if(Point_Meny == 1){
      0009B9 CEu00u13         [ 2] 2002 	ldw	x, _Point_Meny+0
      0009BC A3 00 01         [ 2] 2003 	cpw	x, #0x0001
      0009BF 26 30            [ 1] 2004 	jrne	00112$
                                   2005 ;	clock.c: 289: Set_time(EEPROM_DATA(DnClock_hour_1),EEPROM_DATA(DnClock_min_1));
      0009C1 AE 40 03         [ 2] 2006 	ldw	x, #0x4003
      0009C4 F6               [ 1] 2007 	ld	a, (x)
      0009C5 AE 40 02         [ 2] 2008 	ldw	x, #0x4002
      0009C8 88               [ 1] 2009 	push	a
      0009C9 F6               [ 1] 2010 	ld	a, (x)
      0009CA 95               [ 1] 2011 	ld	xh, a
      0009CB 88               [ 1] 2012 	push	a
      0009CC CDr07r03         [ 4] 2013 	call	_Set_time
      0009CF 5B 02            [ 2] 2014 	addw	sp, #2
                                   2015 ;	clock.c: 290: EEPROM_UNLOCK();
      0009D1 CDr06r1B         [ 4] 2016 	call	_EEPROM_UNLOCK
                                   2017 ;	clock.c: 291: EEPROM_DATA(DnClock_hour_1) = Clock_Temp[0];
      0009D4 AEr00r08         [ 2] 2018 	ldw	x, #_Clock_Temp+0
      0009D7 F6               [ 1] 2019 	ld	a, (x)
      0009D8 90 AE 40 02      [ 2] 2020 	ldw	y, #0x4002
      0009DC 90 F7            [ 1] 2021 	ld	(y), a
                                   2022 ;	clock.c: 292: EEPROM_DATA(DnClock_min_1)	= Clock_Temp[1];
      0009DE E6 01            [ 1] 2023 	ld	a, (0x1, x)
      0009E0 AE 40 03         [ 2] 2024 	ldw	x, #0x4003
      0009E3 F7               [ 1] 2025 	ld	(x), a
                                   2026 ;	clock.c: 293: EEPROM_LOCK();
      0009E4 AE 50 5F         [ 2] 2027 	ldw	x, #0x505f
      0009E7 F6               [ 1] 2028 	ld	a, (x)
      0009E8 A4 F7            [ 1] 2029 	and	a, #0xf7
      0009EA F7               [ 1] 2030 	ld	(x), a
                                   2031 ;	clock.c: 294: Point_Meny = 1;
      0009EB AE 00 01         [ 2] 2032 	ldw	x, #0x0001
      0009EE CFu00u13         [ 2] 2033 	ldw	_Point_Meny+0, x
      0009F1                       2034 00112$:
                                   2035 ;	clock.c: 297: if(Point_Meny == 2){
      0009F1 CEu00u13         [ 2] 2036 	ldw	x, _Point_Meny+0
      0009F4 A3 00 02         [ 2] 2037 	cpw	x, #0x0002
      0009F7 26 30            [ 1] 2038 	jrne	00114$
                                   2039 ;	clock.c: 298: Set_time(EEPROM_DATA(DnClock_hour_2),EEPROM_DATA(DnClock_min_2));
      0009F9 AE 40 05         [ 2] 2040 	ldw	x, #0x4005
      0009FC F6               [ 1] 2041 	ld	a, (x)
      0009FD AE 40 04         [ 2] 2042 	ldw	x, #0x4004
      000A00 88               [ 1] 2043 	push	a
      000A01 F6               [ 1] 2044 	ld	a, (x)
      000A02 95               [ 1] 2045 	ld	xh, a
      000A03 88               [ 1] 2046 	push	a
      000A04 CDr07r03         [ 4] 2047 	call	_Set_time
      000A07 5B 02            [ 2] 2048 	addw	sp, #2
                                   2049 ;	clock.c: 299: EEPROM_UNLOCK();
      000A09 CDr06r1B         [ 4] 2050 	call	_EEPROM_UNLOCK
                                   2051 ;	clock.c: 300: EEPROM_DATA(DnClock_hour_2) = Clock_Temp[0];
      000A0C AEr00r08         [ 2] 2052 	ldw	x, #_Clock_Temp+0
      000A0F F6               [ 1] 2053 	ld	a, (x)
      000A10 90 AE 40 04      [ 2] 2054 	ldw	y, #0x4004
      000A14 90 F7            [ 1] 2055 	ld	(y), a
                                   2056 ;	clock.c: 301: EEPROM_DATA(DnClock_min_2)	= Clock_Temp[1];
      000A16 E6 01            [ 1] 2057 	ld	a, (0x1, x)
      000A18 AE 40 05         [ 2] 2058 	ldw	x, #0x4005
      000A1B F7               [ 1] 2059 	ld	(x), a
                                   2060 ;	clock.c: 302: EEPROM_LOCK();
      000A1C AE 50 5F         [ 2] 2061 	ldw	x, #0x505f
      000A1F F6               [ 1] 2062 	ld	a, (x)
      000A20 A4 F7            [ 1] 2063 	and	a, #0xf7
      000A22 F7               [ 1] 2064 	ld	(x), a
                                   2065 ;	clock.c: 303: Point_Meny = 2;
      000A23 AE 00 02         [ 2] 2066 	ldw	x, #0x0002
      000A26 CFu00u13         [ 2] 2067 	ldw	_Point_Meny+0, x
      000A29                       2068 00114$:
                                   2069 ;	clock.c: 306: if(Point_Meny == 3){
      000A29 CEu00u13         [ 2] 2070 	ldw	x, _Point_Meny+0
      000A2C A3 00 03         [ 2] 2071 	cpw	x, #0x0003
      000A2F 26 30            [ 1] 2072 	jrne	00116$
                                   2073 ;	clock.c: 307: Set_time(EEPROM_DATA(DnClock_hour_3),EEPROM_DATA(DnClock_min_3));
      000A31 AE 40 07         [ 2] 2074 	ldw	x, #0x4007
      000A34 F6               [ 1] 2075 	ld	a, (x)
      000A35 AE 40 06         [ 2] 2076 	ldw	x, #0x4006
      000A38 88               [ 1] 2077 	push	a
      000A39 F6               [ 1] 2078 	ld	a, (x)
      000A3A 95               [ 1] 2079 	ld	xh, a
      000A3B 88               [ 1] 2080 	push	a
      000A3C CDr07r03         [ 4] 2081 	call	_Set_time
      000A3F 5B 02            [ 2] 2082 	addw	sp, #2
                                   2083 ;	clock.c: 308: EEPROM_UNLOCK();
      000A41 CDr06r1B         [ 4] 2084 	call	_EEPROM_UNLOCK
                                   2085 ;	clock.c: 309: EEPROM_DATA(DnClock_hour_3) = Clock_Temp[0];
      000A44 AEr00r08         [ 2] 2086 	ldw	x, #_Clock_Temp+0
      000A47 F6               [ 1] 2087 	ld	a, (x)
      000A48 90 AE 40 06      [ 2] 2088 	ldw	y, #0x4006
      000A4C 90 F7            [ 1] 2089 	ld	(y), a
                                   2090 ;	clock.c: 310: EEPROM_DATA(DnClock_min_3)	= Clock_Temp[1];
      000A4E E6 01            [ 1] 2091 	ld	a, (0x1, x)
      000A50 AE 40 07         [ 2] 2092 	ldw	x, #0x4007
      000A53 F7               [ 1] 2093 	ld	(x), a
                                   2094 ;	clock.c: 311: EEPROM_LOCK();
      000A54 AE 50 5F         [ 2] 2095 	ldw	x, #0x505f
      000A57 F6               [ 1] 2096 	ld	a, (x)
      000A58 A4 F7            [ 1] 2097 	and	a, #0xf7
      000A5A F7               [ 1] 2098 	ld	(x), a
                                   2099 ;	clock.c: 312: Point_Meny = 3;
      000A5B AE 00 03         [ 2] 2100 	ldw	x, #0x0003
      000A5E CFu00u13         [ 2] 2101 	ldw	_Point_Meny+0, x
      000A61                       2102 00116$:
                                   2103 ;	clock.c: 315: if(Point_Meny == 4)clock(); //exit
      000A61 CEu00u13         [ 2] 2104 	ldw	x, _Point_Meny+0
      000A64 A3 00 04         [ 2] 2105 	cpw	x, #0x0004
      000A67 26 03            [ 1] 2106 	jrne	00120$
      000A69 CDr0Cr47         [ 4] 2107 	call	_clock
      000A6C                       2108 00120$:
                                   2109 ;	clock.c: 322: Soft_Timer++;
      000A6C CEu00u11         [ 2] 2110 	ldw	x, _Soft_Timer+0
      000A6F 5C               [ 2] 2111 	incw	x
                                   2112 ;	clock.c: 323: if(Soft_Timer == 300){
      000A70 CFu00u11         [ 2] 2113 	ldw	_Soft_Timer+0, x
      000A73 A3 01 2C         [ 2] 2114 	cpw	x, #0x012c
      000A76 27 03            [ 1] 2115 	jreq	00196$
      000A78 CCr09r43         [ 2] 2116 	jp	00124$
      000A7B                       2117 00196$:
                                   2118 ;	clock.c: 324: TM1637_sendMASS(0x5E,0x78,0x08,ASCI[Point_Meny]);
      000A7B AEr00r03         [ 2] 2119 	ldw	x, #_TM1637_seg+0
      000A7E 1F 01            [ 2] 2120 	ldw	(0x01, sp), x
      000A80 1E 01            [ 2] 2121 	ldw	x, (0x01, sp)
      000A82 A6 5E            [ 1] 2122 	ld	a, #0x5e
      000A84 F7               [ 1] 2123 	ld	(x), a
      000A85 1E 01            [ 2] 2124 	ldw	x, (0x01, sp)
      000A87 5C               [ 2] 2125 	incw	x
      000A88 A6 78            [ 1] 2126 	ld	a, #0x78
      000A8A F7               [ 1] 2127 	ld	(x), a
      000A8B 1E 01            [ 2] 2128 	ldw	x, (0x01, sp)
      000A8D 5C               [ 2] 2129 	incw	x
      000A8E 5C               [ 2] 2130 	incw	x
      000A8F A6 08            [ 1] 2131 	ld	a, #0x08
      000A91 F7               [ 1] 2132 	ld	(x), a
      000A92 16 01            [ 2] 2133 	ldw	y, (0x01, sp)
      000A94 72 A9 00 03      [ 2] 2134 	addw	y, #0x0003
      000A98 AEr00r07         [ 2] 2135 	ldw	x, #_ASCI+0
      000A9B 72 BBu00u13      [ 2] 2136 	addw	x, _Point_Meny+0
      000A9F F6               [ 1] 2137 	ld	a, (x)
      000AA0 90 F7            [ 1] 2138 	ld	(y), a
      000AA2 CDr01r39         [ 4] 2139 	call	_TM1637_send
                                   2140 ;	clock.c: 325: Soft_Timer = 0x00;
      000AA5 5F               [ 1] 2141 	clrw	x
      000AA6 CFu00u11         [ 2] 2142 	ldw	_Soft_Timer+0, x
      000AA9 CCr09r43         [ 2] 2143 	jp	00124$
      000AAC 5B 02            [ 2] 2144 	addw	sp, #2
      000AAE 81               [ 4] 2145 	ret
                                   2146 ;	clock.c: 330: void Set_Meny(){ //Настройки "C__2"
                                   2147 ;	-----------------------------------------
                                   2148 ;	 function Set_Meny
                                   2149 ;	-----------------------------------------
      000AAF                       2150 _Set_Meny:
      000AAF 52 02            [ 2] 2151 	sub	sp, #2
                                   2152 ;	clock.c: 332: TM1637_cleer();
      000AB1 CDr01r80         [ 4] 2153 	call	_TM1637_cleer
                                   2154 ;	clock.c: 333: Point_Meny = 0;
      000AB4 5F               [ 1] 2155 	clrw	x
      000AB5 CFu00u13         [ 2] 2156 	ldw	_Point_Meny+0, x
                                   2157 ;	clock.c: 334: Soft_Timer = 0x00;
      000AB8 5F               [ 1] 2158 	clrw	x
      000AB9 CFu00u11         [ 2] 2159 	ldw	_Soft_Timer+0, x
                                   2160 ;	clock.c: 336: while(1){
      000ABC                       2161 00122$:
                                   2162 ;	clock.c: 338: if(button(up)){
      000ABC 4B 05            [ 1] 2163 	push	#0x05
      000ABE CDr06rA6         [ 4] 2164 	call	_button
      000AC1 5B 01            [ 2] 2165 	addw	sp, #1
      000AC3 4D               [ 1] 2166 	tnz	a
      000AC4 27 10            [ 1] 2167 	jreq	00104$
                                   2168 ;	clock.c: 339: Point_Meny++;
      000AC6 CEu00u13         [ 2] 2169 	ldw	x, _Point_Meny+0
      000AC9 5C               [ 2] 2170 	incw	x
                                   2171 ;	clock.c: 340: if(Point_Meny > 4)Point_Meny = 0;
      000ACA CFu00u13         [ 2] 2172 	ldw	_Point_Meny+0, x
      000ACD A3 00 04         [ 2] 2173 	cpw	x, #0x0004
      000AD0 23 04            [ 2] 2174 	jrule	00104$
      000AD2 5F               [ 1] 2175 	clrw	x
      000AD3 CFu00u13         [ 2] 2176 	ldw	_Point_Meny+0, x
      000AD6                       2177 00104$:
                                   2178 ;	clock.c: 343: if(button(dn)){
      000AD6 4B 07            [ 1] 2179 	push	#0x07
      000AD8 CDr06rA6         [ 4] 2180 	call	_button
      000ADB 5B 01            [ 2] 2181 	addw	sp, #1
      000ADD 4D               [ 1] 2182 	tnz	a
      000ADE 27 12            [ 1] 2183 	jreq	00108$
                                   2184 ;	clock.c: 344: Point_Meny--;
      000AE0 CEu00u13         [ 2] 2185 	ldw	x, _Point_Meny+0
      000AE3 5A               [ 2] 2186 	decw	x
                                   2187 ;	clock.c: 345: if(Point_Meny > 4)Point_Meny = 4;
      000AE4 CFu00u13         [ 2] 2188 	ldw	_Point_Meny+0, x
      000AE7 A3 00 04         [ 2] 2189 	cpw	x, #0x0004
      000AEA 23 06            [ 2] 2190 	jrule	00108$
      000AEC AE 00 04         [ 2] 2191 	ldw	x, #0x0004
      000AEF CFu00u13         [ 2] 2192 	ldw	_Point_Meny+0, x
      000AF2                       2193 00108$:
                                   2194 ;	clock.c: 348: if(button(ok)){
      000AF2 4B 06            [ 1] 2195 	push	#0x06
      000AF4 CDr06rA6         [ 4] 2196 	call	_button
      000AF7 5B 01            [ 2] 2197 	addw	sp, #1
      000AF9 4D               [ 1] 2198 	tnz	a
      000AFA 27 55            [ 1] 2199 	jreq	00118$
                                   2200 ;	clock.c: 350: if(Point_Meny == 0){ //тут настройка RTC
      000AFC CEu00u13         [ 2] 2201 	ldw	x, _Point_Meny+0
      000AFF 26 2C            [ 1] 2202 	jrne	00110$
                                   2203 ;	clock.c: 351: RTC_Read();
      000B01 CDr04rDE         [ 4] 2204 	call	_RTC_Read
                                   2205 ;	clock.c: 352: Set_time(hour,min);
      000B04 3Bu00u01         [ 1] 2206 	push	_min+0
      000B07 3Bu00u02         [ 1] 2207 	push	_hour+0
      000B0A CDr07r03         [ 4] 2208 	call	_Set_time
      000B0D 5B 02            [ 2] 2209 	addw	sp, #2
                                   2210 ;	clock.c: 353: RTC_Set(0, Clock_Temp[1], Clock_Temp[0], 1, 1, 1, 20);
      000B0F AEr00r08         [ 2] 2211 	ldw	x, #_Clock_Temp+0
      000B12 F6               [ 1] 2212 	ld	a, (x)
      000B13 88               [ 1] 2213 	push	a
      000B14 E6 01            [ 1] 2214 	ld	a, (0x1, x)
      000B16 97               [ 1] 2215 	ld	xl, a
      000B17 84               [ 1] 2216 	pop	a
      000B18 4B 14            [ 1] 2217 	push	#0x14
      000B1A 4B 01            [ 1] 2218 	push	#0x01
      000B1C 4B 01            [ 1] 2219 	push	#0x01
      000B1E 4B 01            [ 1] 2220 	push	#0x01
      000B20 88               [ 1] 2221 	push	a
      000B21 9F               [ 1] 2222 	ld	a, xl
      000B22 88               [ 1] 2223 	push	a
      000B23 4B 00            [ 1] 2224 	push	#0x00
      000B25 CDr05r8D         [ 4] 2225 	call	_RTC_Set
      000B28 5B 07            [ 2] 2226 	addw	sp, #7
                                   2227 ;	clock.c: 354: clock();
      000B2A CDr0Cr47         [ 4] 2228 	call	_clock
      000B2D                       2229 00110$:
                                   2230 ;	clock.c: 357: if(Point_Meny == 1)Set_DnTimer();
      000B2D CEu00u13         [ 2] 2231 	ldw	x, _Point_Meny+0
      000B30 A3 00 01         [ 2] 2232 	cpw	x, #0x0001
      000B33 26 03            [ 1] 2233 	jrne	00112$
      000B35 CDr09r36         [ 4] 2234 	call	_Set_DnTimer
      000B38                       2235 00112$:
                                   2236 ;	clock.c: 359: if(Point_Meny == 4) clock();
      000B38 CEu00u13         [ 2] 2237 	ldw	x, _Point_Meny+0
      000B3B A3 00 04         [ 2] 2238 	cpw	x, #0x0004
      000B3E 26 03            [ 1] 2239 	jrne	00114$
      000B40 CDr0Cr47         [ 4] 2240 	call	_clock
      000B43                       2241 00114$:
                                   2242 ;	clock.c: 360: if(Point_Meny == 3){
      000B43 CEu00u13         [ 2] 2243 	ldw	x, _Point_Meny+0
      000B46 A3 00 03         [ 2] 2244 	cpw	x, #0x0003
      000B49 26 06            [ 1] 2245 	jrne	00118$
                                   2246 ;	clock.c: 361: Set_Brigh();
      000B4B CDr08r4D         [ 4] 2247 	call	_Set_Brigh
                                   2248 ;	clock.c: 362: clock();
      000B4E CDr0Cr47         [ 4] 2249 	call	_clock
      000B51                       2250 00118$:
                                   2251 ;	clock.c: 368: Soft_Timer++;
      000B51 CEu00u11         [ 2] 2252 	ldw	x, _Soft_Timer+0
      000B54 5C               [ 2] 2253 	incw	x
                                   2254 ;	clock.c: 369: if(Soft_Timer == 300){
      000B55 CFu00u11         [ 2] 2255 	ldw	_Soft_Timer+0, x
      000B58 A3 01 2C         [ 2] 2256 	cpw	x, #0x012c
      000B5B 27 03            [ 1] 2257 	jreq	00187$
      000B5D CCr0ArBC         [ 2] 2258 	jp	00122$
      000B60                       2259 00187$:
                                   2260 ;	clock.c: 370: TM1637_sendMASS(0x50,0x08,0x08,ASCI[Point_Meny]);
      000B60 AEr00r03         [ 2] 2261 	ldw	x, #_TM1637_seg+0
      000B63 1F 01            [ 2] 2262 	ldw	(0x01, sp), x
      000B65 1E 01            [ 2] 2263 	ldw	x, (0x01, sp)
      000B67 A6 50            [ 1] 2264 	ld	a, #0x50
      000B69 F7               [ 1] 2265 	ld	(x), a
      000B6A 1E 01            [ 2] 2266 	ldw	x, (0x01, sp)
      000B6C 5C               [ 2] 2267 	incw	x
      000B6D A6 08            [ 1] 2268 	ld	a, #0x08
      000B6F F7               [ 1] 2269 	ld	(x), a
      000B70 1E 01            [ 2] 2270 	ldw	x, (0x01, sp)
      000B72 5C               [ 2] 2271 	incw	x
      000B73 5C               [ 2] 2272 	incw	x
      000B74 A6 08            [ 1] 2273 	ld	a, #0x08
      000B76 F7               [ 1] 2274 	ld	(x), a
      000B77 16 01            [ 2] 2275 	ldw	y, (0x01, sp)
      000B79 72 A9 00 03      [ 2] 2276 	addw	y, #0x0003
      000B7D AEr00r07         [ 2] 2277 	ldw	x, #_ASCI+0
      000B80 72 BBu00u13      [ 2] 2278 	addw	x, _Point_Meny+0
      000B84 F6               [ 1] 2279 	ld	a, (x)
      000B85 90 F7            [ 1] 2280 	ld	(y), a
      000B87 CDr01r39         [ 4] 2281 	call	_TM1637_send
                                   2282 ;	clock.c: 371: Soft_Timer = 0x00;
      000B8A 5F               [ 1] 2283 	clrw	x
      000B8B CFu00u11         [ 2] 2284 	ldw	_Soft_Timer+0, x
      000B8E CCr0ArBC         [ 2] 2285 	jp	00122$
      000B91 5B 02            [ 2] 2286 	addw	sp, #2
      000B93 81               [ 4] 2287 	ret
                                   2288 ;	clock.c: 377: void Meny(){ //Меню
                                   2289 ;	-----------------------------------------
                                   2290 ;	 function Meny
                                   2291 ;	-----------------------------------------
      000B94                       2292 _Meny:
      000B94 52 02            [ 2] 2293 	sub	sp, #2
                                   2294 ;	clock.c: 379: TM1637_cleer();
      000B96 CDr01r80         [ 4] 2295 	call	_TM1637_cleer
                                   2296 ;	clock.c: 380: Point_Meny = 0;
      000B99 5F               [ 1] 2297 	clrw	x
      000B9A CFu00u13         [ 2] 2298 	ldw	_Point_Meny+0, x
                                   2299 ;	clock.c: 381: Soft_Timer = 0x00;
      000B9D 5F               [ 1] 2300 	clrw	x
      000B9E CFu00u11         [ 2] 2301 	ldw	_Soft_Timer+0, x
                                   2302 ;	clock.c: 383: while(1){
      000BA1                       2303 00121$:
                                   2304 ;	clock.c: 385: if(button(up)){
      000BA1 4B 05            [ 1] 2305 	push	#0x05
      000BA3 CDr06rA6         [ 4] 2306 	call	_button
      000BA6 5B 01            [ 2] 2307 	addw	sp, #1
      000BA8 4D               [ 1] 2308 	tnz	a
      000BA9 27 10            [ 1] 2309 	jreq	00104$
                                   2310 ;	clock.c: 386: Point_Meny++;
      000BAB CEu00u13         [ 2] 2311 	ldw	x, _Point_Meny+0
      000BAE 5C               [ 2] 2312 	incw	x
                                   2313 ;	clock.c: 387: if(Point_Meny > 3)Point_Meny = 0;
      000BAF CFu00u13         [ 2] 2314 	ldw	_Point_Meny+0, x
      000BB2 A3 00 03         [ 2] 2315 	cpw	x, #0x0003
      000BB5 23 04            [ 2] 2316 	jrule	00104$
      000BB7 5F               [ 1] 2317 	clrw	x
      000BB8 CFu00u13         [ 2] 2318 	ldw	_Point_Meny+0, x
      000BBB                       2319 00104$:
                                   2320 ;	clock.c: 390: if(button(dn)){
      000BBB 4B 07            [ 1] 2321 	push	#0x07
      000BBD CDr06rA6         [ 4] 2322 	call	_button
      000BC0 5B 01            [ 2] 2323 	addw	sp, #1
      000BC2 4D               [ 1] 2324 	tnz	a
      000BC3 27 12            [ 1] 2325 	jreq	00108$
                                   2326 ;	clock.c: 391: Point_Meny--;
      000BC5 CEu00u13         [ 2] 2327 	ldw	x, _Point_Meny+0
      000BC8 5A               [ 2] 2328 	decw	x
                                   2329 ;	clock.c: 392: if(Point_Meny > 3)Point_Meny = 3;
      000BC9 CFu00u13         [ 2] 2330 	ldw	_Point_Meny+0, x
      000BCC A3 00 03         [ 2] 2331 	cpw	x, #0x0003
      000BCF 23 06            [ 2] 2332 	jrule	00108$
      000BD1 AE 00 03         [ 2] 2333 	ldw	x, #0x0003
      000BD4 CFu00u13         [ 2] 2334 	ldw	_Point_Meny+0, x
      000BD7                       2335 00108$:
                                   2336 ;	clock.c: 395: if(button(ok)){
      000BD7 4B 06            [ 1] 2337 	push	#0x06
      000BD9 CDr06rA6         [ 4] 2338 	call	_button
      000BDC 5B 01            [ 2] 2339 	addw	sp, #1
      000BDE 4D               [ 1] 2340 	tnz	a
      000BDF 27 26            [ 1] 2341 	jreq	00117$
                                   2342 ;	clock.c: 396: if(Point_Meny == 0)dnClock(); //обратные часы "С__0"
      000BE1 CEu00u13         [ 2] 2343 	ldw	x, _Point_Meny+0
      000BE4 26 03            [ 1] 2344 	jrne	00110$
      000BE6 CDr0Er6C         [ 4] 2345 	call	_dnClock
      000BE9                       2346 00110$:
                                   2347 ;	clock.c: 397: if(Point_Meny == 1 || Point_Meny == 3)clock(); //Часы "C__1"
      000BE9 CEu00u13         [ 2] 2348 	ldw	x, _Point_Meny+0
      000BEC A3 00 01         [ 2] 2349 	cpw	x, #0x0001
      000BEF 27 08            [ 1] 2350 	jreq	00111$
      000BF1 CEu00u13         [ 2] 2351 	ldw	x, _Point_Meny+0
      000BF4 A3 00 03         [ 2] 2352 	cpw	x, #0x0003
      000BF7 26 03            [ 1] 2353 	jrne	00112$
      000BF9                       2354 00111$:
      000BF9 CDr0Cr47         [ 4] 2355 	call	_clock
      000BFC                       2356 00112$:
                                   2357 ;	clock.c: 398: if(Point_Meny == 2) Set_Meny(); //Настройки "C__2"
      000BFC CEu00u13         [ 2] 2358 	ldw	x, _Point_Meny+0
      000BFF A3 00 02         [ 2] 2359 	cpw	x, #0x0002
      000C02 26 03            [ 1] 2360 	jrne	00117$
      000C04 CDr0ArAF         [ 4] 2361 	call	_Set_Meny
      000C07                       2362 00117$:
                                   2363 ;	clock.c: 403: Soft_Timer++;
      000C07 CEu00u11         [ 2] 2364 	ldw	x, _Soft_Timer+0
      000C0A 5C               [ 2] 2365 	incw	x
                                   2366 ;	clock.c: 404: if(Soft_Timer == 300){
      000C0B CFu00u11         [ 2] 2367 	ldw	_Soft_Timer+0, x
      000C0E A3 01 2C         [ 2] 2368 	cpw	x, #0x012c
      000C11 26 8E            [ 1] 2369 	jrne	00121$
                                   2370 ;	clock.c: 405: TM1637_sendMASS(0x39,0x08,0x08,ASCI[Point_Meny]);
      000C13 AEr00r03         [ 2] 2371 	ldw	x, #_TM1637_seg+0
      000C16 1F 01            [ 2] 2372 	ldw	(0x01, sp), x
      000C18 1E 01            [ 2] 2373 	ldw	x, (0x01, sp)
      000C1A A6 39            [ 1] 2374 	ld	a, #0x39
      000C1C F7               [ 1] 2375 	ld	(x), a
      000C1D 1E 01            [ 2] 2376 	ldw	x, (0x01, sp)
      000C1F 5C               [ 2] 2377 	incw	x
      000C20 A6 08            [ 1] 2378 	ld	a, #0x08
      000C22 F7               [ 1] 2379 	ld	(x), a
      000C23 1E 01            [ 2] 2380 	ldw	x, (0x01, sp)
      000C25 5C               [ 2] 2381 	incw	x
      000C26 5C               [ 2] 2382 	incw	x
      000C27 A6 08            [ 1] 2383 	ld	a, #0x08
      000C29 F7               [ 1] 2384 	ld	(x), a
      000C2A 16 01            [ 2] 2385 	ldw	y, (0x01, sp)
      000C2C 72 A9 00 03      [ 2] 2386 	addw	y, #0x0003
      000C30 AEr00r07         [ 2] 2387 	ldw	x, #_ASCI+0
      000C33 72 BBu00u13      [ 2] 2388 	addw	x, _Point_Meny+0
      000C37 F6               [ 1] 2389 	ld	a, (x)
      000C38 90 F7            [ 1] 2390 	ld	(y), a
      000C3A CDr01r39         [ 4] 2391 	call	_TM1637_send
                                   2392 ;	clock.c: 406: Soft_Timer = 0x00;
      000C3D 5F               [ 1] 2393 	clrw	x
      000C3E CFu00u11         [ 2] 2394 	ldw	_Soft_Timer+0, x
      000C41 CCr0BrA1         [ 2] 2395 	jp	00121$
      000C44 5B 02            [ 2] 2396 	addw	sp, #2
      000C46 81               [ 4] 2397 	ret
                                   2398 ;	clock.c: 412: void clock(void){
                                   2399 ;	-----------------------------------------
                                   2400 ;	 function clock
                                   2401 ;	-----------------------------------------
      000C47                       2402 _clock:
      000C47 52 06            [ 2] 2403 	sub	sp, #6
                                   2404 ;	clock.c: 414: TM1637_cleer();
      000C49 CDr01r80         [ 4] 2405 	call	_TM1637_cleer
                                   2406 ;	clock.c: 415: Soft_Timer = 0x00; //Сброс таймера
      000C4C 5F               [ 1] 2407 	clrw	x
      000C4D CFu00u11         [ 2] 2408 	ldw	_Soft_Timer+0, x
                                   2409 ;	clock.c: 417: while(1){
      000C50                       2410 00114$:
                                   2411 ;	clock.c: 419: Soft_Timer++;
      000C50 CEu00u11         [ 2] 2412 	ldw	x, _Soft_Timer+0
      000C53 5C               [ 2] 2413 	incw	x
      000C54 CFu00u11         [ 2] 2414 	ldw	_Soft_Timer+0, x
                                   2415 ;	clock.c: 422: if(button(up))Set_Brigh();
      000C57 4B 05            [ 1] 2416 	push	#0x05
      000C59 CDr06rA6         [ 4] 2417 	call	_button
      000C5C 5B 01            [ 2] 2418 	addw	sp, #1
      000C5E 4D               [ 1] 2419 	tnz	a
      000C5F 27 03            [ 1] 2420 	jreq	00102$
      000C61 CDr08r4D         [ 4] 2421 	call	_Set_Brigh
      000C64                       2422 00102$:
                                   2423 ;	clock.c: 423: if(button(dn))Set_Brigh();
      000C64 4B 07            [ 1] 2424 	push	#0x07
      000C66 CDr06rA6         [ 4] 2425 	call	_button
      000C69 5B 01            [ 2] 2426 	addw	sp, #1
      000C6B 4D               [ 1] 2427 	tnz	a
      000C6C 27 03            [ 1] 2428 	jreq	00104$
      000C6E CDr08r4D         [ 4] 2429 	call	_Set_Brigh
      000C71                       2430 00104$:
                                   2431 ;	clock.c: 424: if(button(ok))Meny();
      000C71 4B 06            [ 1] 2432 	push	#0x06
      000C73 CDr06rA6         [ 4] 2433 	call	_button
      000C76 5B 01            [ 2] 2434 	addw	sp, #1
      000C78 4D               [ 1] 2435 	tnz	a
      000C79 27 03            [ 1] 2436 	jreq	00106$
      000C7B CDr0Br94         [ 4] 2437 	call	_Meny
      000C7E                       2438 00106$:
                                   2439 ;	clock.c: 426: if(Soft_Timer == 3000){ // Отображение времени при значении Программного таймера
      000C7E CEu00u11         [ 2] 2440 	ldw	x, _Soft_Timer+0
      000C81 A3 0B B8         [ 2] 2441 	cpw	x, #0x0bb8
      000C84 26 CA            [ 1] 2442 	jrne	00114$
                                   2443 ;	clock.c: 427: RTC_Read();
      000C86 CDr04rDE         [ 4] 2444 	call	_RTC_Read
                                   2445 ;	clock.c: 428: dot = !dot;
      000C89 C6u00u07         [ 1] 2446 	ld	a, _dot+0
      000C8C A0 01            [ 1] 2447 	sub	a, #0x01
      000C8E 4F               [ 1] 2448 	clr	a
      000C8F 49               [ 1] 2449 	rlc	a
      000C90 C7u00u07         [ 1] 2450 	ld	_dot+0, a
                                   2451 ;	clock.c: 431: TM1637_seg[0] = ASCI[hour/10];
      000C93 AEr00r03         [ 2] 2452 	ldw	x, #_TM1637_seg+0
      000C96 1F 05            [ 2] 2453 	ldw	(0x05, sp), x
      000C98 AEr00r07         [ 2] 2454 	ldw	x, #_ASCI+0
      000C9B 1F 03            [ 2] 2455 	ldw	(0x03, sp), x
      000C9D 5F               [ 1] 2456 	clrw	x
      000C9E C6u00u02         [ 1] 2457 	ld	a, _hour+0
      000CA1 97               [ 1] 2458 	ld	xl, a
      000CA2 A6 0A            [ 1] 2459 	ld	a, #0x0a
      000CA4 62               [ 2] 2460 	div	x, a
      000CA5 4F               [ 1] 2461 	clr	a
      000CA6 95               [ 1] 2462 	ld	xh, a
      000CA7 72 FB 03         [ 2] 2463 	addw	x, (0x03, sp)
      000CAA F6               [ 1] 2464 	ld	a, (x)
      000CAB 1E 05            [ 2] 2465 	ldw	x, (0x05, sp)
      000CAD F7               [ 1] 2466 	ld	(x), a
                                   2467 ;	clock.c: 432: TM1637_seg[1] = ASCI[hour%10];
      000CAE 1E 05            [ 2] 2468 	ldw	x, (0x05, sp)
      000CB0 5C               [ 2] 2469 	incw	x
      000CB1 1F 01            [ 2] 2470 	ldw	(0x01, sp), x
      000CB3 5F               [ 1] 2471 	clrw	x
      000CB4 C6u00u02         [ 1] 2472 	ld	a, _hour+0
      000CB7 97               [ 1] 2473 	ld	xl, a
      000CB8 A6 0A            [ 1] 2474 	ld	a, #0x0a
      000CBA 62               [ 2] 2475 	div	x, a
      000CBB 5F               [ 1] 2476 	clrw	x
      000CBC 97               [ 1] 2477 	ld	xl, a
      000CBD 72 FB 03         [ 2] 2478 	addw	x, (0x03, sp)
      000CC0 F6               [ 1] 2479 	ld	a, (x)
      000CC1 1E 01            [ 2] 2480 	ldw	x, (0x01, sp)
      000CC3 F7               [ 1] 2481 	ld	(x), a
                                   2482 ;	clock.c: 433: TM1637_seg[2] = ASCI[min/10];
      000CC4 16 05            [ 2] 2483 	ldw	y, (0x05, sp)
      000CC6 72 A9 00 02      [ 2] 2484 	addw	y, #0x0002
      000CCA 5F               [ 1] 2485 	clrw	x
      000CCB C6u00u01         [ 1] 2486 	ld	a, _min+0
      000CCE 97               [ 1] 2487 	ld	xl, a
      000CCF A6 0A            [ 1] 2488 	ld	a, #0x0a
      000CD1 62               [ 2] 2489 	div	x, a
      000CD2 4F               [ 1] 2490 	clr	a
      000CD3 95               [ 1] 2491 	ld	xh, a
      000CD4 72 FB 03         [ 2] 2492 	addw	x, (0x03, sp)
      000CD7 F6               [ 1] 2493 	ld	a, (x)
      000CD8 90 F7            [ 1] 2494 	ld	(y), a
                                   2495 ;	clock.c: 434: TM1637_seg[3] = ASCI[min%10];
      000CDA 16 05            [ 2] 2496 	ldw	y, (0x05, sp)
      000CDC 72 A9 00 03      [ 2] 2497 	addw	y, #0x0003
      000CE0 5F               [ 1] 2498 	clrw	x
      000CE1 C6u00u01         [ 1] 2499 	ld	a, _min+0
      000CE4 97               [ 1] 2500 	ld	xl, a
      000CE5 A6 0A            [ 1] 2501 	ld	a, #0x0a
      000CE7 62               [ 2] 2502 	div	x, a
      000CE8 5F               [ 1] 2503 	clrw	x
      000CE9 97               [ 1] 2504 	ld	xl, a
      000CEA 72 FB 03         [ 2] 2505 	addw	x, (0x03, sp)
      000CED F6               [ 1] 2506 	ld	a, (x)
      000CEE 90 F7            [ 1] 2507 	ld	(y), a
                                   2508 ;	clock.c: 436: if(hour<10)	TM1637_seg[0] =  0x00; //Отключение первого разряда если в нем 0
      000CF0 C6u00u02         [ 1] 2509 	ld	a, _hour+0
      000CF3 A1 0A            [ 1] 2510 	cp	a, #0x0a
      000CF5 24 03            [ 1] 2511 	jrnc	00108$
      000CF7 1E 05            [ 2] 2512 	ldw	x, (0x05, sp)
      000CF9 7F               [ 1] 2513 	clr	(x)
      000CFA                       2514 00108$:
                                   2515 ;	clock.c: 437: if(dot) TM1637_seg[1] = TM1637_seg[1] + 0x80; //Включение секундных точек
      000CFA 72 00u00u07 02   [ 2] 2516 	btjt	_dot+0, #0, 00153$
      000CFF 20 08            [ 2] 2517 	jra	00110$
      000D01                       2518 00153$:
      000D01 1E 01            [ 2] 2519 	ldw	x, (0x01, sp)
      000D03 F6               [ 1] 2520 	ld	a, (x)
      000D04 AB 80            [ 1] 2521 	add	a, #0x80
      000D06 1E 01            [ 2] 2522 	ldw	x, (0x01, sp)
      000D08 F7               [ 1] 2523 	ld	(x), a
      000D09                       2524 00110$:
                                   2525 ;	clock.c: 439: TM1637_send();
      000D09 CDr01r39         [ 4] 2526 	call	_TM1637_send
                                   2527 ;	clock.c: 440: Soft_Timer = 0x00; //Сброс таймера
      000D0C 5F               [ 1] 2528 	clrw	x
      000D0D CFu00u11         [ 2] 2529 	ldw	_Soft_Timer+0, x
      000D10 CCr0Cr50         [ 2] 2530 	jp	00114$
      000D13 5B 06            [ 2] 2531 	addw	sp, #6
      000D15 81               [ 4] 2532 	ret
                                   2533 ;	clock.c: 465: unsigned long transTime(unsigned long d, unsigned long h, unsigned long m, unsigned long s){ //d, h, m, s
                                   2534 ;	-----------------------------------------
                                   2535 ;	 function transTime
                                   2536 ;	-----------------------------------------
      000D16                       2537 _transTime:
      000D16 52 04            [ 2] 2538 	sub	sp, #4
                                   2539 ;	clock.c: 466: return ((d*86400)+(((h*60)+m)*60+s));
      000D18 1E 09            [ 2] 2540 	ldw	x, (0x09, sp)
      000D1A 89               [ 2] 2541 	pushw	x
      000D1B 1E 09            [ 2] 2542 	ldw	x, (0x09, sp)
      000D1D 89               [ 2] 2543 	pushw	x
      000D1E 4B 80            [ 1] 2544 	push	#0x80
      000D20 4B 51            [ 1] 2545 	push	#0x51
      000D22 4B 01            [ 1] 2546 	push	#0x01
      000D24 4B 00            [ 1] 2547 	push	#0x00
      000D26 CDr00r00         [ 4] 2548 	call	__mullong
      000D29 5B 08            [ 2] 2549 	addw	sp, #8
      000D2B 1F 03            [ 2] 2550 	ldw	(0x03, sp), x
      000D2D 17 01            [ 2] 2551 	ldw	(0x01, sp), y
      000D2F 1E 0D            [ 2] 2552 	ldw	x, (0x0d, sp)
      000D31 89               [ 2] 2553 	pushw	x
      000D32 1E 0D            [ 2] 2554 	ldw	x, (0x0d, sp)
      000D34 89               [ 2] 2555 	pushw	x
      000D35 4B 3C            [ 1] 2556 	push	#0x3c
      000D37 5F               [ 1] 2557 	clrw	x
      000D38 89               [ 2] 2558 	pushw	x
      000D39 4B 00            [ 1] 2559 	push	#0x00
      000D3B CDr00r00         [ 4] 2560 	call	__mullong
      000D3E 5B 08            [ 2] 2561 	addw	sp, #8
      000D40 51               [ 1] 2562 	exgw	x, y
      000D41 72 F9 11         [ 2] 2563 	addw	y, (0x11, sp)
      000D44 9F               [ 1] 2564 	ld	a, xl
      000D45 19 10            [ 1] 2565 	adc	a, (0x10, sp)
      000D47 02               [ 1] 2566 	rlwa	x
      000D48 19 0F            [ 1] 2567 	adc	a, (0x0f, sp)
      000D4A 95               [ 1] 2568 	ld	xh, a
      000D4B 90 89            [ 2] 2569 	pushw	y
      000D4D 89               [ 2] 2570 	pushw	x
      000D4E 4B 3C            [ 1] 2571 	push	#0x3c
      000D50 5F               [ 1] 2572 	clrw	x
      000D51 89               [ 2] 2573 	pushw	x
      000D52 4B 00            [ 1] 2574 	push	#0x00
      000D54 CDr00r00         [ 4] 2575 	call	__mullong
      000D57 5B 08            [ 2] 2576 	addw	sp, #8
      000D59 51               [ 1] 2577 	exgw	x, y
      000D5A 72 F9 15         [ 2] 2578 	addw	y, (0x15, sp)
      000D5D 9F               [ 1] 2579 	ld	a, xl
      000D5E 19 14            [ 1] 2580 	adc	a, (0x14, sp)
      000D60 02               [ 1] 2581 	rlwa	x
      000D61 19 13            [ 1] 2582 	adc	a, (0x13, sp)
      000D63 95               [ 1] 2583 	ld	xh, a
      000D64 72 F9 03         [ 2] 2584 	addw	y, (0x03, sp)
      000D67 9F               [ 1] 2585 	ld	a, xl
      000D68 19 02            [ 1] 2586 	adc	a, (0x02, sp)
      000D6A 02               [ 1] 2587 	rlwa	x
      000D6B 19 01            [ 1] 2588 	adc	a, (0x01, sp)
      000D6D 95               [ 1] 2589 	ld	xh, a
      000D6E 51               [ 1] 2590 	exgw	x, y
      000D6F 5B 04            [ 2] 2591 	addw	sp, #4
      000D71 81               [ 4] 2592 	ret
                                   2593 ;	clock.c: 470: void conSec(long secin){
                                   2594 ;	-----------------------------------------
                                   2595 ;	 function conSec
                                   2596 ;	-----------------------------------------
      000D72                       2597 _conSec:
      000D72 52 10            [ 2] 2598 	sub	sp, #16
                                   2599 ;	clock.c: 476: con_day = secin/86400;
      000D74 4B 80            [ 1] 2600 	push	#0x80
      000D76 4B 51            [ 1] 2601 	push	#0x51
      000D78 4B 01            [ 1] 2602 	push	#0x01
      000D7A 4B 00            [ 1] 2603 	push	#0x00
      000D7C 1E 19            [ 2] 2604 	ldw	x, (0x19, sp)
      000D7E 89               [ 2] 2605 	pushw	x
      000D7F 1E 19            [ 2] 2606 	ldw	x, (0x19, sp)
      000D81 89               [ 2] 2607 	pushw	x
      000D82 CDr00r00         [ 4] 2608 	call	__divslong
      000D85 5B 08            [ 2] 2609 	addw	sp, #8
      000D87 CFu00u19         [ 2] 2610 	ldw	_con_day+2, x
      000D8A 90 CFu00u17      [ 2] 2611 	ldw	_con_day+0, y
                                   2612 ;	clock.c: 477: secin = secin-(con_day*86400);
      000D8E 3Bu00u1A         [ 1] 2613 	push	_con_day+3
      000D91 3Bu00u19         [ 1] 2614 	push	_con_day+2
      000D94 3Bu00u18         [ 1] 2615 	push	_con_day+1
      000D97 3Bu00u17         [ 1] 2616 	push	_con_day+0
      000D9A 4B 80            [ 1] 2617 	push	#0x80
      000D9C 4B 51            [ 1] 2618 	push	#0x51
      000D9E 4B 01            [ 1] 2619 	push	#0x01
      000DA0 4B 00            [ 1] 2620 	push	#0x00
      000DA2 CDr00r00         [ 4] 2621 	call	__mullong
      000DA5 5B 08            [ 2] 2622 	addw	sp, #8
      000DA7 1F 0F            [ 2] 2623 	ldw	(0x0f, sp), x
      000DA9 17 0D            [ 2] 2624 	ldw	(0x0d, sp), y
      000DAB 16 15            [ 2] 2625 	ldw	y, (0x15, sp)
      000DAD 1E 13            [ 2] 2626 	ldw	x, (0x13, sp)
      000DAF 72 F2 0F         [ 2] 2627 	subw	y, (0x0f, sp)
      000DB2 9F               [ 1] 2628 	ld	a, xl
      000DB3 12 0E            [ 1] 2629 	sbc	a, (0x0e, sp)
      000DB5 02               [ 1] 2630 	rlwa	x
      000DB6 12 0D            [ 1] 2631 	sbc	a, (0x0d, sp)
      000DB8 95               [ 1] 2632 	ld	xh, a
      000DB9 17 15            [ 2] 2633 	ldw	(0x15, sp), y
      000DBB 1F 13            [ 2] 2634 	ldw	(0x13, sp), x
                                   2635 ;	clock.c: 479: con_hour = (secin/3600);
      000DBD 4B 10            [ 1] 2636 	push	#0x10
      000DBF 4B 0E            [ 1] 2637 	push	#0x0e
      000DC1 5F               [ 1] 2638 	clrw	x
      000DC2 89               [ 2] 2639 	pushw	x
      000DC3 1E 19            [ 2] 2640 	ldw	x, (0x19, sp)
      000DC5 89               [ 2] 2641 	pushw	x
      000DC6 1E 19            [ 2] 2642 	ldw	x, (0x19, sp)
      000DC8 89               [ 2] 2643 	pushw	x
      000DC9 CDr00r00         [ 4] 2644 	call	__divslong
      000DCC 5B 08            [ 2] 2645 	addw	sp, #8
      000DCE CFu00u1D         [ 2] 2646 	ldw	_con_hour+2, x
      000DD1 90 CFu00u1B      [ 2] 2647 	ldw	_con_hour+0, y
                                   2648 ;	clock.c: 480: con_min	 = ((secin-(3600*con_hour))/60);
      000DD5 3Bu00u1E         [ 1] 2649 	push	_con_hour+3
      000DD8 3Bu00u1D         [ 1] 2650 	push	_con_hour+2
      000DDB 3Bu00u1C         [ 1] 2651 	push	_con_hour+1
      000DDE 3Bu00u1B         [ 1] 2652 	push	_con_hour+0
      000DE1 4B 10            [ 1] 2653 	push	#0x10
      000DE3 4B 0E            [ 1] 2654 	push	#0x0e
      000DE5 5F               [ 1] 2655 	clrw	x
      000DE6 89               [ 2] 2656 	pushw	x
      000DE7 CDr00r00         [ 4] 2657 	call	__mullong
      000DEA 5B 08            [ 2] 2658 	addw	sp, #8
      000DEC 1F 0B            [ 2] 2659 	ldw	(0x0b, sp), x
      000DEE 17 09            [ 2] 2660 	ldw	(0x09, sp), y
      000DF0 16 15            [ 2] 2661 	ldw	y, (0x15, sp)
      000DF2 17 07            [ 2] 2662 	ldw	(0x07, sp), y
      000DF4 16 13            [ 2] 2663 	ldw	y, (0x13, sp)
      000DF6 17 05            [ 2] 2664 	ldw	(0x05, sp), y
      000DF8 16 07            [ 2] 2665 	ldw	y, (0x07, sp)
      000DFA 72 F2 0B         [ 2] 2666 	subw	y, (0x0b, sp)
      000DFD 7B 06            [ 1] 2667 	ld	a, (0x06, sp)
      000DFF 12 0A            [ 1] 2668 	sbc	a, (0x0a, sp)
      000E01 97               [ 1] 2669 	ld	xl, a
      000E02 7B 05            [ 1] 2670 	ld	a, (0x05, sp)
      000E04 12 09            [ 1] 2671 	sbc	a, (0x09, sp)
      000E06 95               [ 1] 2672 	ld	xh, a
      000E07 4B 3C            [ 1] 2673 	push	#0x3c
      000E09 4B 00            [ 1] 2674 	push	#0x00
      000E0B 4B 00            [ 1] 2675 	push	#0x00
      000E0D 4B 00            [ 1] 2676 	push	#0x00
      000E0F 90 89            [ 2] 2677 	pushw	y
      000E11 89               [ 2] 2678 	pushw	x
      000E12 CDr00r00         [ 4] 2679 	call	__divulong
      000E15 5B 08            [ 2] 2680 	addw	sp, #8
      000E17 CFu00u21         [ 2] 2681 	ldw	_con_min+2, x
      000E1A 90 CFu00u1F      [ 2] 2682 	ldw	_con_min+0, y
                                   2683 ;	clock.c: 481: con_sec	 = (secin-(((con_hour*60)*60)+(con_min*60)));
      000E1E 3Bu00u22         [ 1] 2684 	push	_con_min+3
      000E21 3Bu00u21         [ 1] 2685 	push	_con_min+2
      000E24 3Bu00u20         [ 1] 2686 	push	_con_min+1
      000E27 3Bu00u1F         [ 1] 2687 	push	_con_min+0
      000E2A 4B 3C            [ 1] 2688 	push	#0x3c
      000E2C 5F               [ 1] 2689 	clrw	x
      000E2D 89               [ 2] 2690 	pushw	x
      000E2E 4B 00            [ 1] 2691 	push	#0x00
      000E30 CDr00r00         [ 4] 2692 	call	__mullong
      000E33 5B 08            [ 2] 2693 	addw	sp, #8
      000E35 51               [ 1] 2694 	exgw	x, y
      000E36 72 F9 0B         [ 2] 2695 	addw	y, (0x0b, sp)
      000E39 9F               [ 1] 2696 	ld	a, xl
      000E3A 19 0A            [ 1] 2697 	adc	a, (0x0a, sp)
      000E3C 6B 02            [ 1] 2698 	ld	(0x02, sp), a
      000E3E 9E               [ 1] 2699 	ld	a, xh
      000E3F 19 09            [ 1] 2700 	adc	a, (0x09, sp)
      000E41 95               [ 1] 2701 	ld	xh, a
      000E42 7B 08            [ 1] 2702 	ld	a, (0x08, sp)
      000E44 90 89            [ 2] 2703 	pushw	y
      000E46 10 02            [ 1] 2704 	sub	a, (#2, sp)
      000E48 90 85            [ 2] 2705 	popw	y
      000E4A 90 97            [ 1] 2706 	ld	yl, a
      000E4C 7B 07            [ 1] 2707 	ld	a, (0x07, sp)
      000E4E 90 89            [ 2] 2708 	pushw	y
      000E50 12 01            [ 1] 2709 	sbc	a, (#1, sp)
      000E52 90 85            [ 2] 2710 	popw	y
      000E54 90 95            [ 1] 2711 	ld	yh, a
      000E56 7B 06            [ 1] 2712 	ld	a, (0x06, sp)
      000E58 12 02            [ 1] 2713 	sbc	a, (0x02, sp)
      000E5A 97               [ 1] 2714 	ld	xl, a
      000E5B 7B 05            [ 1] 2715 	ld	a, (0x05, sp)
      000E5D 89               [ 2] 2716 	pushw	x
      000E5E 12 01            [ 1] 2717 	sbc	a, (#1, sp)
      000E60 85               [ 2] 2718 	popw	x
      000E61 95               [ 1] 2719 	ld	xh, a
      000E62 90 CFu00u25      [ 2] 2720 	ldw	_con_sec+2, y
      000E66 CFu00u23         [ 2] 2721 	ldw	_con_sec+0, x
      000E69 5B 10            [ 2] 2722 	addw	sp, #16
      000E6B 81               [ 4] 2723 	ret
                                   2724 ;	clock.c: 500: void dnClock(void){
                                   2725 ;	-----------------------------------------
                                   2726 ;	 function dnClock
                                   2727 ;	-----------------------------------------
      000E6C                       2728 _dnClock:
      000E6C 52 42            [ 2] 2729 	sub	sp, #66
                                   2730 ;	clock.c: 502: TM1637_cleer();
      000E6E CDr01r80         [ 4] 2731 	call	_TM1637_cleer
                                   2732 ;	clock.c: 503: Soft_Timer = 0x00; //Сброс таймера
      000E71 5F               [ 1] 2733 	clrw	x
      000E72 CFu00u11         [ 2] 2734 	ldw	_Soft_Timer+0, x
                                   2735 ;	clock.c: 504: PointTimer = 0;
      000E75 72 5Fu00u22      [ 1] 2736 	clr	_PointTimer+0
                                   2737 ;	clock.c: 506: DnClock_Tim_0 = transTime(0,EEPROM_DATA(DnClock_hour_0),EEPROM_DATA(DnClock_min_0),0);
      000E79 AE 40 01         [ 2] 2738 	ldw	x, #0x4001
      000E7C F6               [ 1] 2739 	ld	a, (x)
      000E7D 97               [ 1] 2740 	ld	xl, a
      000E7E 49               [ 1] 2741 	rlc	a
      000E7F 4F               [ 1] 2742 	clr	a
      000E80 A2 00            [ 1] 2743 	sbc	a, #0x00
      000E82 95               [ 1] 2744 	ld	xh, a
      000E83 6B 09            [ 1] 2745 	ld	(0x09, sp), a
      000E85 6B 08            [ 1] 2746 	ld	(0x08, sp), a
      000E87 90 AE 40 00      [ 2] 2747 	ldw	y, #0x4000
      000E8B 90 F6            [ 1] 2748 	ld	a, (y)
      000E8D 6B 34            [ 1] 2749 	ld	(0x34, sp), a
      000E8F 7B 34            [ 1] 2750 	ld	a, (0x34, sp)
      000E91 49               [ 1] 2751 	rlc	a
      000E92 4F               [ 1] 2752 	clr	a
      000E93 A2 00            [ 1] 2753 	sbc	a, #0x00
      000E95 6B 33            [ 1] 2754 	ld	(0x33, sp), a
      000E97 90 97            [ 1] 2755 	ld	yl, a
      000E99 90 95            [ 1] 2756 	ld	yh, a
      000E9B 4B 00            [ 1] 2757 	push	#0x00
      000E9D 4B 00            [ 1] 2758 	push	#0x00
      000E9F 4B 00            [ 1] 2759 	push	#0x00
      000EA1 4B 00            [ 1] 2760 	push	#0x00
      000EA3 89               [ 2] 2761 	pushw	x
      000EA4 1E 0E            [ 2] 2762 	ldw	x, (0x0e, sp)
      000EA6 89               [ 2] 2763 	pushw	x
      000EA7 1E 3B            [ 2] 2764 	ldw	x, (0x3b, sp)
      000EA9 89               [ 2] 2765 	pushw	x
      000EAA 90 89            [ 2] 2766 	pushw	y
      000EAC 5F               [ 1] 2767 	clrw	x
      000EAD 89               [ 2] 2768 	pushw	x
      000EAE 5F               [ 1] 2769 	clrw	x
      000EAF 89               [ 2] 2770 	pushw	x
      000EB0 CDr0Dr16         [ 4] 2771 	call	_transTime
      000EB3 5B 10            [ 2] 2772 	addw	sp, #16
      000EB5 CFu00u0C         [ 2] 2773 	ldw	_DnClock_Tim_0+2, x
      000EB8 90 CFu00u0A      [ 2] 2774 	ldw	_DnClock_Tim_0+0, y
                                   2775 ;	clock.c: 507: DnClock_Tim_1 = transTime(0,EEPROM_DATA(DnClock_hour_1),EEPROM_DATA(DnClock_min_1),0);
      000EBC AE 40 03         [ 2] 2776 	ldw	x, #0x4003
      000EBF F6               [ 1] 2777 	ld	a, (x)
      000EC0 97               [ 1] 2778 	ld	xl, a
      000EC1 49               [ 1] 2779 	rlc	a
      000EC2 4F               [ 1] 2780 	clr	a
      000EC3 A2 00            [ 1] 2781 	sbc	a, #0x00
      000EC5 95               [ 1] 2782 	ld	xh, a
      000EC6 6B 24            [ 1] 2783 	ld	(0x24, sp), a
      000EC8 6B 23            [ 1] 2784 	ld	(0x23, sp), a
      000ECA 90 AE 40 02      [ 2] 2785 	ldw	y, #0x4002
      000ECE 90 F6            [ 1] 2786 	ld	a, (y)
      000ED0 6B 21            [ 1] 2787 	ld	(0x21, sp), a
      000ED2 7B 21            [ 1] 2788 	ld	a, (0x21, sp)
      000ED4 49               [ 1] 2789 	rlc	a
      000ED5 4F               [ 1] 2790 	clr	a
      000ED6 A2 00            [ 1] 2791 	sbc	a, #0x00
      000ED8 6B 20            [ 1] 2792 	ld	(0x20, sp), a
      000EDA 90 97            [ 1] 2793 	ld	yl, a
      000EDC 90 95            [ 1] 2794 	ld	yh, a
      000EDE 4B 00            [ 1] 2795 	push	#0x00
      000EE0 4B 00            [ 1] 2796 	push	#0x00
      000EE2 4B 00            [ 1] 2797 	push	#0x00
      000EE4 4B 00            [ 1] 2798 	push	#0x00
      000EE6 89               [ 2] 2799 	pushw	x
      000EE7 1E 29            [ 2] 2800 	ldw	x, (0x29, sp)
      000EE9 89               [ 2] 2801 	pushw	x
      000EEA 1E 28            [ 2] 2802 	ldw	x, (0x28, sp)
      000EEC 89               [ 2] 2803 	pushw	x
      000EED 90 89            [ 2] 2804 	pushw	y
      000EEF 5F               [ 1] 2805 	clrw	x
      000EF0 89               [ 2] 2806 	pushw	x
      000EF1 5F               [ 1] 2807 	clrw	x
      000EF2 89               [ 2] 2808 	pushw	x
      000EF3 CDr0Dr16         [ 4] 2809 	call	_transTime
      000EF6 5B 10            [ 2] 2810 	addw	sp, #16
      000EF8 CFu00u10         [ 2] 2811 	ldw	_DnClock_Tim_1+2, x
      000EFB 90 CFu00u0E      [ 2] 2812 	ldw	_DnClock_Tim_1+0, y
                                   2813 ;	clock.c: 508: DnClock_Tim_2 = transTime(0,EEPROM_DATA(DnClock_hour_2),EEPROM_DATA(DnClock_min_2),0);
      000EFF AE 40 05         [ 2] 2814 	ldw	x, #0x4005
      000F02 F6               [ 1] 2815 	ld	a, (x)
      000F03 97               [ 1] 2816 	ld	xl, a
      000F04 49               [ 1] 2817 	rlc	a
      000F05 4F               [ 1] 2818 	clr	a
      000F06 A2 00            [ 1] 2819 	sbc	a, #0x00
      000F08 95               [ 1] 2820 	ld	xh, a
      000F09 6B 28            [ 1] 2821 	ld	(0x28, sp), a
      000F0B 6B 27            [ 1] 2822 	ld	(0x27, sp), a
      000F0D 90 AE 40 04      [ 2] 2823 	ldw	y, #0x4004
      000F11 90 F6            [ 1] 2824 	ld	a, (y)
      000F13 6B 2E            [ 1] 2825 	ld	(0x2e, sp), a
      000F15 7B 2E            [ 1] 2826 	ld	a, (0x2e, sp)
      000F17 49               [ 1] 2827 	rlc	a
      000F18 4F               [ 1] 2828 	clr	a
      000F19 A2 00            [ 1] 2829 	sbc	a, #0x00
      000F1B 6B 2D            [ 1] 2830 	ld	(0x2d, sp), a
      000F1D 90 97            [ 1] 2831 	ld	yl, a
      000F1F 90 95            [ 1] 2832 	ld	yh, a
      000F21 4B 00            [ 1] 2833 	push	#0x00
      000F23 4B 00            [ 1] 2834 	push	#0x00
      000F25 4B 00            [ 1] 2835 	push	#0x00
      000F27 4B 00            [ 1] 2836 	push	#0x00
      000F29 89               [ 2] 2837 	pushw	x
      000F2A 1E 2D            [ 2] 2838 	ldw	x, (0x2d, sp)
      000F2C 89               [ 2] 2839 	pushw	x
      000F2D 1E 35            [ 2] 2840 	ldw	x, (0x35, sp)
      000F2F 89               [ 2] 2841 	pushw	x
      000F30 90 89            [ 2] 2842 	pushw	y
      000F32 5F               [ 1] 2843 	clrw	x
      000F33 89               [ 2] 2844 	pushw	x
      000F34 5F               [ 1] 2845 	clrw	x
      000F35 89               [ 2] 2846 	pushw	x
      000F36 CDr0Dr16         [ 4] 2847 	call	_transTime
      000F39 5B 10            [ 2] 2848 	addw	sp, #16
      000F3B CFu00u14         [ 2] 2849 	ldw	_DnClock_Tim_2+2, x
      000F3E 90 CFu00u12      [ 2] 2850 	ldw	_DnClock_Tim_2+0, y
                                   2851 ;	clock.c: 509: DnClock_Tim_3 = transTime(0,EEPROM_DATA(DnClock_hour_3),EEPROM_DATA(DnClock_min_3),0);
      000F42 AE 40 07         [ 2] 2852 	ldw	x, #0x4007
      000F45 F6               [ 1] 2853 	ld	a, (x)
      000F46 97               [ 1] 2854 	ld	xl, a
      000F47 49               [ 1] 2855 	rlc	a
      000F48 4F               [ 1] 2856 	clr	a
      000F49 A2 00            [ 1] 2857 	sbc	a, #0x00
      000F4B 95               [ 1] 2858 	ld	xh, a
      000F4C 6B 3B            [ 1] 2859 	ld	(0x3b, sp), a
      000F4E 6B 3A            [ 1] 2860 	ld	(0x3a, sp), a
      000F50 90 AE 40 06      [ 2] 2861 	ldw	y, #0x4006
      000F54 90 F6            [ 1] 2862 	ld	a, (y)
      000F56 6B 0F            [ 1] 2863 	ld	(0x0f, sp), a
      000F58 7B 0F            [ 1] 2864 	ld	a, (0x0f, sp)
      000F5A 49               [ 1] 2865 	rlc	a
      000F5B 4F               [ 1] 2866 	clr	a
      000F5C A2 00            [ 1] 2867 	sbc	a, #0x00
      000F5E 6B 0E            [ 1] 2868 	ld	(0x0e, sp), a
      000F60 90 97            [ 1] 2869 	ld	yl, a
      000F62 90 95            [ 1] 2870 	ld	yh, a
      000F64 4B 00            [ 1] 2871 	push	#0x00
      000F66 4B 00            [ 1] 2872 	push	#0x00
      000F68 4B 00            [ 1] 2873 	push	#0x00
      000F6A 4B 00            [ 1] 2874 	push	#0x00
      000F6C 89               [ 2] 2875 	pushw	x
      000F6D 1E 40            [ 2] 2876 	ldw	x, (0x40, sp)
      000F6F 89               [ 2] 2877 	pushw	x
      000F70 1E 16            [ 2] 2878 	ldw	x, (0x16, sp)
      000F72 89               [ 2] 2879 	pushw	x
      000F73 90 89            [ 2] 2880 	pushw	y
      000F75 5F               [ 1] 2881 	clrw	x
      000F76 89               [ 2] 2882 	pushw	x
      000F77 5F               [ 1] 2883 	clrw	x
      000F78 89               [ 2] 2884 	pushw	x
      000F79 CDr0Dr16         [ 4] 2885 	call	_transTime
      000F7C 5B 10            [ 2] 2886 	addw	sp, #16
      000F7E CFu00u18         [ 2] 2887 	ldw	_DnClock_Tim_3+2, x
      000F81 90 CFu00u16      [ 2] 2888 	ldw	_DnClock_Tim_3+0, y
                                   2889 ;	clock.c: 511: while(1){
      000F85                       2890 00126$:
                                   2891 ;	clock.c: 513: Soft_Timer++;
      000F85 CEu00u11         [ 2] 2892 	ldw	x, _Soft_Timer+0
      000F88 5C               [ 2] 2893 	incw	x
      000F89 CFu00u11         [ 2] 2894 	ldw	_Soft_Timer+0, x
                                   2895 ;	clock.c: 515: if(button(ok))Meny();
      000F8C 4B 06            [ 1] 2896 	push	#0x06
      000F8E CDr06rA6         [ 4] 2897 	call	_button
      000F91 5B 01            [ 2] 2898 	addw	sp, #1
      000F93 4D               [ 1] 2899 	tnz	a
      000F94 27 03            [ 1] 2900 	jreq	00102$
      000F96 CDr0Br94         [ 4] 2901 	call	_Meny
      000F99                       2902 00102$:
                                   2903 ;	clock.c: 517: if(button(up)){
      000F99 4B 05            [ 1] 2904 	push	#0x05
      000F9B CDr06rA6         [ 4] 2905 	call	_button
      000F9E 5B 01            [ 2] 2906 	addw	sp, #1
      000FA0 6B 39            [ 1] 2907 	ld	(0x39, sp), a
      000FA2 0D 39            [ 1] 2908 	tnz	(0x39, sp)
      000FA4 27 39            [ 1] 2909 	jreq	00104$
                                   2910 ;	clock.c: 518: TM1637_sendMASS(0x78,0x50,0x08,ASCI[PointTimer]);
      000FA6 AEr00r03         [ 2] 2911 	ldw	x, #_TM1637_seg+0
      000FA9 1F 2F            [ 2] 2912 	ldw	(0x2f, sp), x
      000FAB 1E 2F            [ 2] 2913 	ldw	x, (0x2f, sp)
      000FAD A6 78            [ 1] 2914 	ld	a, #0x78
      000FAF F7               [ 1] 2915 	ld	(x), a
      000FB0 1E 2F            [ 2] 2916 	ldw	x, (0x2f, sp)
      000FB2 5C               [ 2] 2917 	incw	x
      000FB3 A6 50            [ 1] 2918 	ld	a, #0x50
      000FB5 F7               [ 1] 2919 	ld	(x), a
      000FB6 1E 2F            [ 2] 2920 	ldw	x, (0x2f, sp)
      000FB8 5C               [ 2] 2921 	incw	x
      000FB9 5C               [ 2] 2922 	incw	x
      000FBA A6 08            [ 1] 2923 	ld	a, #0x08
      000FBC F7               [ 1] 2924 	ld	(x), a
      000FBD 16 2F            [ 2] 2925 	ldw	y, (0x2f, sp)
      000FBF 72 A9 00 03      [ 2] 2926 	addw	y, #0x0003
      000FC3 AEr00r07         [ 2] 2927 	ldw	x, #_ASCI+0
      000FC6 9F               [ 1] 2928 	ld	a, xl
      000FC7 CBu00u22         [ 1] 2929 	add	a, _PointTimer+0
      000FCA 02               [ 1] 2930 	rlwa	x
      000FCB A9 00            [ 1] 2931 	adc	a, #0x00
      000FCD 95               [ 1] 2932 	ld	xh, a
      000FCE F6               [ 1] 2933 	ld	a, (x)
      000FCF 90 F7            [ 1] 2934 	ld	(y), a
      000FD1 CDr01r39         [ 4] 2935 	call	_TM1637_send
                                   2936 ;	clock.c: 519: delay(9000);
      000FD4 4B 28            [ 1] 2937 	push	#0x28
      000FD6 4B 23            [ 1] 2938 	push	#0x23
      000FD8 5F               [ 1] 2939 	clrw	x
      000FD9 89               [ 2] 2940 	pushw	x
      000FDA CDr00r00         [ 4] 2941 	call	_delay
      000FDD 5B 04            [ 2] 2942 	addw	sp, #4
      000FDF                       2943 00104$:
                                   2944 ;	clock.c: 523: if(Soft_Timer == 5000){ // Отображение времени при значении Программного таймера
      000FDF CEu00u11         [ 2] 2945 	ldw	x, _Soft_Timer+0
      000FE2 A3 13 88         [ 2] 2946 	cpw	x, #0x1388
      000FE5 26 9E            [ 1] 2947 	jrne	00126$
                                   2948 ;	clock.c: 524: RTC_Read();
      000FE7 CDr04rDE         [ 4] 2949 	call	_RTC_Read
                                   2950 ;	clock.c: 527: timeToSec = transTime(0,hour,min,sec);
      000FEA 5F               [ 1] 2951 	clrw	x
      000FEB C6u00u00         [ 1] 2952 	ld	a, _sec+0
      000FEE 97               [ 1] 2953 	ld	xl, a
      000FEF 0F 13            [ 1] 2954 	clr	(0x13, sp)
      000FF1 0F 12            [ 1] 2955 	clr	(0x12, sp)
      000FF3 C6u00u01         [ 1] 2956 	ld	a, _min+0
      000FF6 6B 06            [ 1] 2957 	ld	(0x06, sp), a
      000FF8 0F 05            [ 1] 2958 	clr	(0x05, sp)
      000FFA 90 5F            [ 1] 2959 	clrw	y
      000FFC C6u00u02         [ 1] 2960 	ld	a, _hour+0
      000FFF 6B 19            [ 1] 2961 	ld	(0x19, sp), a
      001001 0F 18            [ 1] 2962 	clr	(0x18, sp)
      001003 0F 17            [ 1] 2963 	clr	(0x17, sp)
      001005 0F 16            [ 1] 2964 	clr	(0x16, sp)
      001007 89               [ 2] 2965 	pushw	x
      001008 1E 14            [ 2] 2966 	ldw	x, (0x14, sp)
      00100A 89               [ 2] 2967 	pushw	x
      00100B 1E 09            [ 2] 2968 	ldw	x, (0x09, sp)
      00100D 89               [ 2] 2969 	pushw	x
      00100E 90 89            [ 2] 2970 	pushw	y
      001010 1E 20            [ 2] 2971 	ldw	x, (0x20, sp)
      001012 89               [ 2] 2972 	pushw	x
      001013 1E 20            [ 2] 2973 	ldw	x, (0x20, sp)
      001015 89               [ 2] 2974 	pushw	x
      001016 5F               [ 1] 2975 	clrw	x
      001017 89               [ 2] 2976 	pushw	x
      001018 5F               [ 1] 2977 	clrw	x
      001019 89               [ 2] 2978 	pushw	x
      00101A CDr0Dr16         [ 4] 2979 	call	_transTime
      00101D 5B 10            [ 2] 2980 	addw	sp, #16
      00101F CFu00u1C         [ 2] 2981 	ldw	_timeToSec+2, x
      001022 90 CFu00u1A      [ 2] 2982 	ldw	_timeToSec+0, y
                                   2983 ;	clock.c: 528: dot = !dot;
      001026 C6u00u07         [ 1] 2984 	ld	a, _dot+0
      001029 A0 01            [ 1] 2985 	sub	a, #0x01
      00102B 4F               [ 1] 2986 	clr	a
      00102C 49               [ 1] 2987 	rlc	a
      00102D C7u00u07         [ 1] 2988 	ld	_dot+0, a
                                   2989 ;	clock.c: 529: PointTimer = 0x00;
      001030 72 5Fu00u22      [ 1] 2990 	clr	_PointTimer+0
                                   2991 ;	clock.c: 532: if( timeToSec+1 > DnClock_Tim_0 & timeToSec < DnClock_Tim_1) PointTimer = 1; //От начало смены до начало обеда
      001034 CEu00u1C         [ 2] 2992 	ldw	x, _timeToSec+2
      001037 1C 00 01         [ 2] 2993 	addw	x, #0x0001
      00103A 1F 37            [ 2] 2994 	ldw	(0x37, sp), x
      00103C C6u00u1B         [ 1] 2995 	ld	a, _timeToSec+1
      00103F A9 00            [ 1] 2996 	adc	a, #0x00
      001041 6B 36            [ 1] 2997 	ld	(0x36, sp), a
      001043 C6u00u1A         [ 1] 2998 	ld	a, _timeToSec+0
      001046 A9 00            [ 1] 2999 	adc	a, #0x00
      001048 6B 35            [ 1] 3000 	ld	(0x35, sp), a
      00104A CEu00u0C         [ 2] 3001 	ldw	x, _DnClock_Tim_0+2
      00104D 13 37            [ 2] 3002 	cpw	x, (0x37, sp)
      00104F C6u00u0B         [ 1] 3003 	ld	a, _DnClock_Tim_0+1
      001052 12 36            [ 1] 3004 	sbc	a, (0x36, sp)
      001054 C6u00u0A         [ 1] 3005 	ld	a, _DnClock_Tim_0+0
      001057 12 35            [ 1] 3006 	sbc	a, (0x35, sp)
      001059 25 04            [ 1] 3007 	jrc	00187$
      00105B 0F 22            [ 1] 3008 	clr	(0x22, sp)
      00105D 20 04            [ 2] 3009 	jra	00188$
      00105F                       3010 00187$:
      00105F A6 01            [ 1] 3011 	ld	a, #0x01
      001061 6B 22            [ 1] 3012 	ld	(0x22, sp), a
      001063                       3013 00188$:
      001063 CEu00u1C         [ 2] 3014 	ldw	x, _timeToSec+2
      001066 C3u00u10         [ 2] 3015 	cpw	x, _DnClock_Tim_1+2
      001069 C6u00u1B         [ 1] 3016 	ld	a, _timeToSec+1
      00106C C2u00u0F         [ 1] 3017 	sbc	a, _DnClock_Tim_1+1
      00106F C6u00u1A         [ 1] 3018 	ld	a, _timeToSec+0
      001072 C2u00u0E         [ 1] 3019 	sbc	a, _DnClock_Tim_1+0
      001075 25 03            [ 1] 3020 	jrc	00189$
      001077 4F               [ 1] 3021 	clr	a
      001078 20 02            [ 2] 3022 	jra	00190$
      00107A                       3023 00189$:
      00107A A6 01            [ 1] 3024 	ld	a, #0x01
      00107C                       3025 00190$:
      00107C 14 22            [ 1] 3026 	and	a, (0x22, sp)
      00107E 4D               [ 1] 3027 	tnz	a
      00107F 27 04            [ 1] 3028 	jreq	00106$
      001081 35 01u00u22      [ 1] 3029 	mov	_PointTimer+0, #0x01
      001085                       3030 00106$:
                                   3031 ;	clock.c: 534: if( timeToSec+1 > DnClock_Tim_1 & timeToSec < DnClock_Tim_2) PointTimer = 2; //от начала обеда до  конца обеда;
      001085 CEu00u10         [ 2] 3032 	ldw	x, _DnClock_Tim_1+2
      001088 13 37            [ 2] 3033 	cpw	x, (0x37, sp)
      00108A C6u00u0F         [ 1] 3034 	ld	a, _DnClock_Tim_1+1
      00108D 12 36            [ 1] 3035 	sbc	a, (0x36, sp)
      00108F C6u00u0E         [ 1] 3036 	ld	a, _DnClock_Tim_1+0
      001092 12 35            [ 1] 3037 	sbc	a, (0x35, sp)
      001094 25 04            [ 1] 3038 	jrc	00192$
      001096 0F 42            [ 1] 3039 	clr	(0x42, sp)
      001098 20 04            [ 2] 3040 	jra	00193$
      00109A                       3041 00192$:
      00109A A6 01            [ 1] 3042 	ld	a, #0x01
      00109C 6B 42            [ 1] 3043 	ld	(0x42, sp), a
      00109E                       3044 00193$:
      00109E CEu00u1C         [ 2] 3045 	ldw	x, _timeToSec+2
      0010A1 C3u00u14         [ 2] 3046 	cpw	x, _DnClock_Tim_2+2
      0010A4 C6u00u1B         [ 1] 3047 	ld	a, _timeToSec+1
      0010A7 C2u00u13         [ 1] 3048 	sbc	a, _DnClock_Tim_2+1
      0010AA C6u00u1A         [ 1] 3049 	ld	a, _timeToSec+0
      0010AD C2u00u12         [ 1] 3050 	sbc	a, _DnClock_Tim_2+0
      0010B0 25 03            [ 1] 3051 	jrc	00194$
      0010B2 4F               [ 1] 3052 	clr	a
      0010B3 20 02            [ 2] 3053 	jra	00195$
      0010B5                       3054 00194$:
      0010B5 A6 01            [ 1] 3055 	ld	a, #0x01
      0010B7                       3056 00195$:
      0010B7 14 42            [ 1] 3057 	and	a, (0x42, sp)
      0010B9 4D               [ 1] 3058 	tnz	a
      0010BA 27 04            [ 1] 3059 	jreq	00108$
      0010BC 35 02u00u22      [ 1] 3060 	mov	_PointTimer+0, #0x02
      0010C0                       3061 00108$:
                                   3062 ;	clock.c: 536: if( timeToSec+1 > DnClock_Tim_2 & timeToSec < DnClock_Tim_3) PointTimer = 3; //от конца  обеда до  конца смены
      0010C0 CEu00u14         [ 2] 3063 	ldw	x, _DnClock_Tim_2+2
      0010C3 13 37            [ 2] 3064 	cpw	x, (0x37, sp)
      0010C5 C6u00u13         [ 1] 3065 	ld	a, _DnClock_Tim_2+1
      0010C8 12 36            [ 1] 3066 	sbc	a, (0x36, sp)
      0010CA C6u00u12         [ 1] 3067 	ld	a, _DnClock_Tim_2+0
      0010CD 12 35            [ 1] 3068 	sbc	a, (0x35, sp)
      0010CF 25 04            [ 1] 3069 	jrc	00197$
      0010D1 0F 07            [ 1] 3070 	clr	(0x07, sp)
      0010D3 20 04            [ 2] 3071 	jra	00198$
      0010D5                       3072 00197$:
      0010D5 A6 01            [ 1] 3073 	ld	a, #0x01
      0010D7 6B 07            [ 1] 3074 	ld	(0x07, sp), a
      0010D9                       3075 00198$:
      0010D9 CEu00u1C         [ 2] 3076 	ldw	x, _timeToSec+2
      0010DC C3u00u18         [ 2] 3077 	cpw	x, _DnClock_Tim_3+2
      0010DF C6u00u1B         [ 1] 3078 	ld	a, _timeToSec+1
      0010E2 C2u00u17         [ 1] 3079 	sbc	a, _DnClock_Tim_3+1
      0010E5 C6u00u1A         [ 1] 3080 	ld	a, _timeToSec+0
      0010E8 C2u00u16         [ 1] 3081 	sbc	a, _DnClock_Tim_3+0
      0010EB 25 03            [ 1] 3082 	jrc	00199$
      0010ED 4F               [ 1] 3083 	clr	a
      0010EE 20 02            [ 2] 3084 	jra	00200$
      0010F0                       3085 00199$:
      0010F0 A6 01            [ 1] 3086 	ld	a, #0x01
      0010F2                       3087 00200$:
      0010F2 14 07            [ 1] 3088 	and	a, (0x07, sp)
      0010F4 4D               [ 1] 3089 	tnz	a
      0010F5 27 04            [ 1] 3090 	jreq	00110$
      0010F7 35 03u00u22      [ 1] 3091 	mov	_PointTimer+0, #0x03
      0010FB                       3092 00110$:
                                   3093 ;	clock.c: 539: switch (PointTimer) {
      0010FB C6u00u22         [ 1] 3094 	ld	a, _PointTimer+0
      0010FE A1 01            [ 1] 3095 	cp	a, #0x01
      001100 27 10            [ 1] 3096 	jreq	00111$
      001102 C6u00u22         [ 1] 3097 	ld	a, _PointTimer+0
      001105 A1 02            [ 1] 3098 	cp	a, #0x02
      001107 27 28            [ 1] 3099 	jreq	00112$
      001109 C6u00u22         [ 1] 3100 	ld	a, _PointTimer+0
      00110C A1 03            [ 1] 3101 	cp	a, #0x03
      00110E 27 40            [ 1] 3102 	jreq	00113$
      001110 20 5D            [ 2] 3103 	jra	00114$
                                   3104 ;	clock.c: 540: case 1: timeRes = DnClock_Tim_1 - timeToSec; break;
      001112                       3105 00111$:
      001112 90 CEu00u10      [ 2] 3106 	ldw	y, _DnClock_Tim_1+2
      001116 72 B2u00u1C      [ 2] 3107 	subw	y, _timeToSec+2
      00111A C6u00u0F         [ 1] 3108 	ld	a, _DnClock_Tim_1+1
      00111D C2u00u1B         [ 1] 3109 	sbc	a, _timeToSec+1
      001120 97               [ 1] 3110 	ld	xl, a
      001121 C6u00u0E         [ 1] 3111 	ld	a, _DnClock_Tim_1+0
      001124 C2u00u1A         [ 1] 3112 	sbc	a, _timeToSec+0
      001127 95               [ 1] 3113 	ld	xh, a
      001128 90 CFu00u20      [ 2] 3114 	ldw	_timeRes+2, y
      00112C CFu00u1E         [ 2] 3115 	ldw	_timeRes+0, x
      00112F 20 45            [ 2] 3116 	jra	00115$
                                   3117 ;	clock.c: 541: case 2: timeRes = DnClock_Tim_2 - timeToSec; break;
      001131                       3118 00112$:
      001131 90 CEu00u14      [ 2] 3119 	ldw	y, _DnClock_Tim_2+2
      001135 72 B2u00u1C      [ 2] 3120 	subw	y, _timeToSec+2
      001139 C6u00u13         [ 1] 3121 	ld	a, _DnClock_Tim_2+1
      00113C C2u00u1B         [ 1] 3122 	sbc	a, _timeToSec+1
      00113F 97               [ 1] 3123 	ld	xl, a
      001140 C6u00u12         [ 1] 3124 	ld	a, _DnClock_Tim_2+0
      001143 C2u00u1A         [ 1] 3125 	sbc	a, _timeToSec+0
      001146 95               [ 1] 3126 	ld	xh, a
      001147 90 CFu00u20      [ 2] 3127 	ldw	_timeRes+2, y
      00114B CFu00u1E         [ 2] 3128 	ldw	_timeRes+0, x
      00114E 20 26            [ 2] 3129 	jra	00115$
                                   3130 ;	clock.c: 542: case 3: timeRes = DnClock_Tim_3 - timeToSec; break;
      001150                       3131 00113$:
      001150 90 CEu00u18      [ 2] 3132 	ldw	y, _DnClock_Tim_3+2
      001154 72 B2u00u1C      [ 2] 3133 	subw	y, _timeToSec+2
      001158 C6u00u17         [ 1] 3134 	ld	a, _DnClock_Tim_3+1
      00115B C2u00u1B         [ 1] 3135 	sbc	a, _timeToSec+1
      00115E 97               [ 1] 3136 	ld	xl, a
      00115F C6u00u16         [ 1] 3137 	ld	a, _DnClock_Tim_3+0
      001162 C2u00u1A         [ 1] 3138 	sbc	a, _timeToSec+0
      001165 95               [ 1] 3139 	ld	xh, a
      001166 90 CFu00u20      [ 2] 3140 	ldw	_timeRes+2, y
      00116A CFu00u1E         [ 2] 3141 	ldw	_timeRes+0, x
      00116D 20 07            [ 2] 3142 	jra	00115$
                                   3143 ;	clock.c: 544: default: timeRes = 0; break;
      00116F                       3144 00114$:
      00116F 5F               [ 1] 3145 	clrw	x
      001170 CFu00u20         [ 2] 3146 	ldw	_timeRes+2, x
      001173 CFu00u1E         [ 2] 3147 	ldw	_timeRes+0, x
                                   3148 ;	clock.c: 545: }
      001176                       3149 00115$:
                                   3150 ;	clock.c: 550: if(timeRes>0){
      001176 CEu00u20         [ 2] 3151 	ldw	x, _timeRes+2
      001179 26 08            [ 1] 3152 	jrne	00211$
      00117B CEu00u1E         [ 2] 3153 	ldw	x, _timeRes+0
      00117E 26 03            [ 1] 3154 	jrne	00211$
      001180 CCr12r4E         [ 2] 3155 	jp	00121$
      001183                       3156 00211$:
                                   3157 ;	clock.c: 551: conSec(timeRes);
      001183 3Bu00u21         [ 1] 3158 	push	_timeRes+3
      001186 3Bu00u20         [ 1] 3159 	push	_timeRes+2
      001189 3Bu00u1F         [ 1] 3160 	push	_timeRes+1
      00118C 3Bu00u1E         [ 1] 3161 	push	_timeRes+0
      00118F CDr0Dr72         [ 4] 3162 	call	_conSec
      001192 5B 04            [ 2] 3163 	addw	sp, #4
                                   3164 ;	clock.c: 552: TM1637_seg[0] = ASCI[con_hour/10];
      001194 AEr00r03         [ 2] 3165 	ldw	x, #_TM1637_seg+0
      001197 1F 40            [ 2] 3166 	ldw	(0x40, sp), x
      001199 AEr00r07         [ 2] 3167 	ldw	x, #_ASCI+0
      00119C 1F 01            [ 2] 3168 	ldw	(0x01, sp), x
      00119E 4B 0A            [ 1] 3169 	push	#0x0a
      0011A0 5F               [ 1] 3170 	clrw	x
      0011A1 89               [ 2] 3171 	pushw	x
      0011A2 4B 00            [ 1] 3172 	push	#0x00
      0011A4 3Bu00u1E         [ 1] 3173 	push	_con_hour+3
      0011A7 3Bu00u1D         [ 1] 3174 	push	_con_hour+2
      0011AA 3Bu00u1C         [ 1] 3175 	push	_con_hour+1
      0011AD 3Bu00u1B         [ 1] 3176 	push	_con_hour+0
      0011B0 CDr00r00         [ 4] 3177 	call	__divulong
      0011B3 5B 08            [ 2] 3178 	addw	sp, #8
      0011B5 72 FB 01         [ 2] 3179 	addw	x, (0x01, sp)
      0011B8 F6               [ 1] 3180 	ld	a, (x)
      0011B9 1E 40            [ 2] 3181 	ldw	x, (0x40, sp)
      0011BB F7               [ 1] 3182 	ld	(x), a
                                   3183 ;	clock.c: 553: TM1637_seg[1] = ASCI[con_hour%10];
      0011BC 1E 40            [ 2] 3184 	ldw	x, (0x40, sp)
      0011BE 5C               [ 2] 3185 	incw	x
      0011BF 1F 1A            [ 2] 3186 	ldw	(0x1a, sp), x
      0011C1 4B 0A            [ 1] 3187 	push	#0x0a
      0011C3 5F               [ 1] 3188 	clrw	x
      0011C4 89               [ 2] 3189 	pushw	x
      0011C5 4B 00            [ 1] 3190 	push	#0x00
      0011C7 3Bu00u1E         [ 1] 3191 	push	_con_hour+3
      0011CA 3Bu00u1D         [ 1] 3192 	push	_con_hour+2
      0011CD 3Bu00u1C         [ 1] 3193 	push	_con_hour+1
      0011D0 3Bu00u1B         [ 1] 3194 	push	_con_hour+0
      0011D3 CDr00r00         [ 4] 3195 	call	__modulong
      0011D6 5B 08            [ 2] 3196 	addw	sp, #8
      0011D8 72 FB 01         [ 2] 3197 	addw	x, (0x01, sp)
      0011DB F6               [ 1] 3198 	ld	a, (x)
      0011DC 1E 1A            [ 2] 3199 	ldw	x, (0x1a, sp)
      0011DE F7               [ 1] 3200 	ld	(x), a
                                   3201 ;	clock.c: 554: TM1637_seg[2] = ASCI[con_min/10];
      0011DF 1E 40            [ 2] 3202 	ldw	x, (0x40, sp)
      0011E1 5C               [ 2] 3203 	incw	x
      0011E2 5C               [ 2] 3204 	incw	x
      0011E3 1F 10            [ 2] 3205 	ldw	(0x10, sp), x
      0011E5 4B 0A            [ 1] 3206 	push	#0x0a
      0011E7 5F               [ 1] 3207 	clrw	x
      0011E8 89               [ 2] 3208 	pushw	x
      0011E9 4B 00            [ 1] 3209 	push	#0x00
      0011EB 3Bu00u22         [ 1] 3210 	push	_con_min+3
      0011EE 3Bu00u21         [ 1] 3211 	push	_con_min+2
      0011F1 3Bu00u20         [ 1] 3212 	push	_con_min+1
      0011F4 3Bu00u1F         [ 1] 3213 	push	_con_min+0
      0011F7 CDr00r00         [ 4] 3214 	call	__divulong
      0011FA 5B 08            [ 2] 3215 	addw	sp, #8
      0011FC 72 FB 01         [ 2] 3216 	addw	x, (0x01, sp)
      0011FF F6               [ 1] 3217 	ld	a, (x)
      001200 1E 10            [ 2] 3218 	ldw	x, (0x10, sp)
      001202 F7               [ 1] 3219 	ld	(x), a
                                   3220 ;	clock.c: 555: TM1637_seg[3] = ASCI[con_min%10];
      001203 1E 40            [ 2] 3221 	ldw	x, (0x40, sp)
      001205 1C 00 03         [ 2] 3222 	addw	x, #0x0003
      001208 1F 1C            [ 2] 3223 	ldw	(0x1c, sp), x
      00120A 4B 0A            [ 1] 3224 	push	#0x0a
      00120C 5F               [ 1] 3225 	clrw	x
      00120D 89               [ 2] 3226 	pushw	x
      00120E 4B 00            [ 1] 3227 	push	#0x00
      001210 3Bu00u22         [ 1] 3228 	push	_con_min+3
      001213 3Bu00u21         [ 1] 3229 	push	_con_min+2
      001216 3Bu00u20         [ 1] 3230 	push	_con_min+1
      001219 3Bu00u1F         [ 1] 3231 	push	_con_min+0
      00121C CDr00r00         [ 4] 3232 	call	__modulong
      00121F 5B 08            [ 2] 3233 	addw	sp, #8
      001221 72 FB 01         [ 2] 3234 	addw	x, (0x01, sp)
      001224 F6               [ 1] 3235 	ld	a, (x)
      001225 1E 1C            [ 2] 3236 	ldw	x, (0x1c, sp)
      001227 F7               [ 1] 3237 	ld	(x), a
                                   3238 ;	clock.c: 556: if(con_hour<10)	TM1637_seg[0] =  0x00; //Отключение первого разряда если в нем 0
      001228 CEu00u1D         [ 2] 3239 	ldw	x, _con_hour+2
      00122B A3 00 0A         [ 2] 3240 	cpw	x, #0x000a
      00122E C6u00u1C         [ 1] 3241 	ld	a, _con_hour+1
      001231 A2 00            [ 1] 3242 	sbc	a, #0x00
      001233 C6u00u1B         [ 1] 3243 	ld	a, _con_hour+0
      001236 A2 00            [ 1] 3244 	sbc	a, #0x00
      001238 24 03            [ 1] 3245 	jrnc	00117$
      00123A 1E 40            [ 2] 3246 	ldw	x, (0x40, sp)
      00123C 7F               [ 1] 3247 	clr	(x)
      00123D                       3248 00117$:
                                   3249 ;	clock.c: 557: if(dot) TM1637_seg[1] = TM1637_seg[1] + 0x80; //Включение секундных точек
      00123D 72 00u00u07 02   [ 2] 3250 	btjt	_dot+0, #0, 00213$
      001242 20 27            [ 2] 3251 	jra	00122$
      001244                       3252 00213$:
      001244 1E 1A            [ 2] 3253 	ldw	x, (0x1a, sp)
      001246 F6               [ 1] 3254 	ld	a, (x)
      001247 AB 80            [ 1] 3255 	add	a, #0x80
      001249 1E 1A            [ 2] 3256 	ldw	x, (0x1a, sp)
      00124B F7               [ 1] 3257 	ld	(x), a
      00124C 20 1D            [ 2] 3258 	jra	00122$
      00124E                       3259 00121$:
                                   3260 ;	clock.c: 560: TM1637_seg[0] = 0x40;
      00124E AEr00r03         [ 2] 3261 	ldw	x, #_TM1637_seg+0
      001251 1F 3E            [ 2] 3262 	ldw	(0x3e, sp), x
      001253 1E 3E            [ 2] 3263 	ldw	x, (0x3e, sp)
      001255 A6 40            [ 1] 3264 	ld	a, #0x40
      001257 F7               [ 1] 3265 	ld	(x), a
                                   3266 ;	clock.c: 561: TM1637_seg[1] = 0x40;
      001258 1E 3E            [ 2] 3267 	ldw	x, (0x3e, sp)
      00125A 5C               [ 2] 3268 	incw	x
      00125B A6 40            [ 1] 3269 	ld	a, #0x40
      00125D F7               [ 1] 3270 	ld	(x), a
                                   3271 ;	clock.c: 562: TM1637_seg[2] = 0x40;
      00125E 1E 3E            [ 2] 3272 	ldw	x, (0x3e, sp)
      001260 5C               [ 2] 3273 	incw	x
      001261 5C               [ 2] 3274 	incw	x
      001262 A6 40            [ 1] 3275 	ld	a, #0x40
      001264 F7               [ 1] 3276 	ld	(x), a
                                   3277 ;	clock.c: 563: TM1637_seg[3] = 0x40;
      001265 1E 3E            [ 2] 3278 	ldw	x, (0x3e, sp)
      001267 A6 40            [ 1] 3279 	ld	a, #0x40
      001269 E7 03            [ 1] 3280 	ld	(0x0003, x), a
      00126B                       3281 00122$:
                                   3282 ;	clock.c: 565: TM1637_send();
      00126B CDr01r39         [ 4] 3283 	call	_TM1637_send
                                   3284 ;	clock.c: 567: Soft_Timer = 0x00; //Сброс таймера
      00126E 5F               [ 1] 3285 	clrw	x
      00126F CFu00u11         [ 2] 3286 	ldw	_Soft_Timer+0, x
      001272 CCr0Fr85         [ 2] 3287 	jp	00126$
      001275 5B 42            [ 2] 3288 	addw	sp, #66
      001277 81               [ 4] 3289 	ret
                                   3290 ;	clock.c: 573: void main(){
                                   3291 ;	-----------------------------------------
                                   3292 ;	 function main
                                   3293 ;	-----------------------------------------
      001278                       3294 _main:
                                   3295 ;	clock.c: 575: PC_DDR &= ~(1<<ok) | (1<<dn) | (1<<up); //инициализация кнопок
      001278 AE 50 0C         [ 2] 3296 	ldw	x, #0x500c
      00127B F6               [ 1] 3297 	ld	a, (x)
      00127C A4 BF            [ 1] 3298 	and	a, #0xbf
      00127E F7               [ 1] 3299 	ld	(x), a
                                   3300 ;	clock.c: 579: TM1637_INIT();
      00127F AE 50 0C         [ 2] 3301 	ldw	x, #0x500c
      001282 F6               [ 1] 3302 	ld	a, (x)
      001283 AA 18            [ 1] 3303 	or	a, #0x18
      001285 F7               [ 1] 3304 	ld	(x), a
      001286 AE 50 0D         [ 2] 3305 	ldw	x, #0x500d
      001289 F6               [ 1] 3306 	ld	a, (x)
      00128A AA 18            [ 1] 3307 	or	a, #0x18
      00128C F7               [ 1] 3308 	ld	(x), a
      00128D CDr01r9F         [ 4] 3309 	call	_TM1637_initialization
                                   3310 ;	clock.c: 580: TM1637_brigh(EEPROM_DATA(setting_Brigh));
      001290 AE 40 00         [ 2] 3311 	ldw	x, #0x4000
      001293 F6               [ 1] 3312 	ld	a, (x)
      001294 88               [ 1] 3313 	push	a
      001295 CDr01r20         [ 4] 3314 	call	_TM1637_brigh
      001298 84               [ 1] 3315 	pop	a
                                   3316 ;	clock.c: 581: I2C_INIT();
      001299 AE 50 07         [ 2] 3317 	ldw	x, #0x5007
      00129C F6               [ 1] 3318 	ld	a, (x)
      00129D AA 30            [ 1] 3319 	or	a, #0x30
      00129F F7               [ 1] 3320 	ld	(x), a
      0012A0 AE 50 08         [ 2] 3321 	ldw	x, #0x5008
      0012A3 F6               [ 1] 3322 	ld	a, (x)
      0012A4 AA 30            [ 1] 3323 	or	a, #0x30
      0012A6 F7               [ 1] 3324 	ld	(x), a
      0012A7 CDr02rFF         [ 4] 3325 	call	_i2c_init
                                   3326 ;	clock.c: 583: if(button(up) || button(dn))hard_Reset();
      0012AA 4B 05            [ 1] 3327 	push	#0x05
      0012AC CDr06rA6         [ 4] 3328 	call	_button
      0012AF 5B 01            [ 2] 3329 	addw	sp, #1
      0012B1 4D               [ 1] 3330 	tnz	a
      0012B2 26 0A            [ 1] 3331 	jrne	00101$
      0012B4 4B 07            [ 1] 3332 	push	#0x07
      0012B6 CDr06rA6         [ 4] 3333 	call	_button
      0012B9 5B 01            [ 2] 3334 	addw	sp, #1
      0012BB 4D               [ 1] 3335 	tnz	a
      0012BC 27 03            [ 1] 3336 	jreq	00105$
      0012BE                       3337 00101$:
      0012BE CDr06r2C         [ 4] 3338 	call	_hard_Reset
                                   3339 ;	clock.c: 590: while(1){
      0012C1                       3340 00105$:
                                   3341 ;	clock.c: 593: dnClock();
      0012C1 CDr0Er6C         [ 4] 3342 	call	_dnClock
      0012C4 20 FB            [ 2] 3343 	jra	00105$
      0012C6 81               [ 4] 3344 	ret
                                   3345 	.area CODE
                                   3346 	.area INITIALIZER
      000000                       3347 __xinit__brigh:
      000000 07                    3348 	.db #0x07	; 7
      000001                       3349 __xinit__command1:
      000001 40                    3350 	.db #0x40	; 64
      000002                       3351 __xinit__command2:
      000002 C0                    3352 	.db #0xC0	; 192
      000003                       3353 __xinit__TM1637_seg:
      000003 FF                    3354 	.db #0xFF	; 255
      000004 FF                    3355 	.db #0xFF	; 255
      000005 FF                    3356 	.db #0xFF	; 255
      000006 FF                    3357 	.db #0xFF	; 255
      000007                       3358 __xinit__ASCI:
      000007 3F                    3359 	.db #0x3F	; 63
      000008 06                    3360 	.db #0x06	; 6
      000009 5B                    3361 	.db #0x5B	; 91
      00000A 4F                    3362 	.db #0x4F	; 79	'O'
      00000B 66                    3363 	.db #0x66	; 102	'f'
      00000C 6D                    3364 	.db #0x6D	; 109	'm'
      00000D 7D                    3365 	.db #0x7D	; 125
      00000E 07                    3366 	.db #0x07	; 7
      00000F 7F                    3367 	.db #0x7F	; 127
      000010 6F                    3368 	.db #0x6F	; 111	'o'
      000011                       3369 __xinit__Soft_Timer:
      000011 00 00                 3370 	.dw #0x0000
      000013                       3371 __xinit__Point_Meny:
      000013 00 00                 3372 	.dw #0x0000
      000015                       3373 __xinit__But_Buff:
      000015 FF                    3374 	.db #0xFF	; 255
      000016                       3375 __xinit__auto_exit:
      000016 00                    3376 	.db #0x00	; 0
      000017                       3377 __xinit__con_day:
      000017 00 00 00 00           3378 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      00001B                       3379 __xinit__con_hour:
      00001B 00 00 00 00           3380 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      00001F                       3381 __xinit__con_min:
      00001F 00 00 00 00           3382 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      000023                       3383 __xinit__con_sec:
      000023 00 00 00 00           3384 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      000027                       3385 __xinit__cl_hour:
      000027 00 00 00 17           3386 	.byte #0x00,#0x00,#0x00,#0x17	; 23
      00002B                       3387 __xinit__cl_min:
      00002B 00 00 00 3A           3388 	.byte #0x00,#0x00,#0x00,#0x3A	; 58
      00002F                       3389 __xinit__cl_sec:
      00002F 00 00 00 3B           3390 	.byte #0x00,#0x00,#0x00,#0x3B	; 59
      000033                       3391 __xinit__con1_sec:
      000033 00 00 0E 10           3392 	.byte #0x00,#0x00,#0x0E,#0x10	; 3600
      000037                       3393 __xinit__clockTemp1:
      000037 00 00 00 00           3394 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      00003B                       3395 __xinit__clockTemp2:
      00003B 00 00 00 00           3396 	.byte #0x00,#0x00,#0x00,#0x00	; 0
      00003F                       3397 __xinit__clockTemp3:
      00003F 00 00 00 00           3398 	.byte #0x00,#0x00,#0x00,#0x00	; 0
                                   3399 	.area CABS (ABS)
